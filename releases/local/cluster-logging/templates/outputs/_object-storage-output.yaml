{{- define "cluster-logging.objectStorageOutputTemplate"}}
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterOutput
metadata:
  name: {{ coalesce .name "default" }}-{{ .objectStorageType }}
  labels:
    logging.kube-core.io/output-name: "{{ coalesce .name "default" }}"
    logging.kube-core.io/output-type: "{{ .objectStorageType }}"
spec:
{{ if (or (eq .objectStorageType "s3") (eq .objectStorageType "minio")) }}
  s3:
    aws_key_id:
      valueFrom:
        secretKeyRef:
          name: {{ coalesce .idSecretName (index .secrets "s3_id" "secretRef" "name") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "id" "secretName")  }}
          key: {{ coalesce .idSecretKey (index .secrets "s3_id" "secretRef" "key") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "id" "secretKey")  }}
    aws_sec_key:
      valueFrom:
        secretKeyRef:
          name: {{ coalesce .keySecretName (index .secrets "s3_key" "secretRef" "name") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "key" "secretName")  }}
          key: {{ coalesce .keySecretKey (index .secrets "s3_key" "secretRef" "key") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "key" "secretKey")  }}
    {{ if (eq .objectStorageType "minio") }}
    s3_endpoint: {{ .endpoint }}
    {{ end }}
    s3_bucket: {{ coalesce .bucket (printf "%s-%s-logs" (coalesce .cluster.logging.config.bucketPrefixOverride .cluster.config.name) .name) }}
    s3_region:  {{ coalesce .region (index .cluster.logging.integrations .objectStorageType "config" "s3_region")  }}
    force_path_style: "true"
    {{ if (eq .txtLogs true) }}
    s3_object_key_format: {{ .cluster.logging.outputs.config.txtObjectKeyFormat }}
    {{ else }}
    s3_object_key_format: {{ .cluster.logging.outputs.config.object_key_format | quote }}
    {{ end }}
{{ else if (eq .objectStorageType "gcs" )}}
  gcs:
    project: {{ coalesce .project (index .cluster.logging.integrations .objectStorageType "config" "project") }}
    bucket: {{ coalesce .bucket (printf "%s-%s-logs" (coalesce .cluster.logging.config.bucketPrefixOverride .cluster.config.name) .name) }}
    {{ if (eq .txtLogs true) }}
    object_key_format: {{ .cluster.logging.outputs.config.txtObjectKeyFormat }}
    {{ else }}
    object_key_format: {{ .cluster.logging.outputs.config.object_key_format | quote }}
    {{ end }}
    credentials_json:
      valueFrom:
        secretKeyRef:
          name: {{ coalesce .gcsSecretName (index .secrets "gcs" "secretRef" "name") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "secretKeyRef" "secretName") }}
          key:  {{ coalesce .gcsSecretKey (index .secrets "gcs" "secretRef" "key") (index .cluster.logging.integrations .objectStorageType "config" "credentials" "secretKeyRef" "secretKey") }}
{{ end }}
{{ if (eq .txtLogs true) }}
    store_as: text
    path: {{ .cluster.logging.outputs.config.txtLogsPath | quote }}
{{ else }}
    store_as: json
    path: {{ .cluster.logging.outputs.config.path | quote }}
{{ end }}
    auto_create_bucket: {{ index .cluster.logging.integrations .objectStorageType "config" "auto_create_bucket" }}
    buffer: {{ toYaml .cluster.logging.outputs.config.buffer | nindent 6 }}
    format:
{{ if (eq .txtLogs true) }}
      type: single_value
      add_newline: false
      message_key: log
{{ else }}
      type: json
{{ end }}

{{ end }}
