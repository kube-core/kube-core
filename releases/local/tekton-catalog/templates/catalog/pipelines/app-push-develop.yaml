apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: app-push-develop
spec:
  params:
  - name: debug-sleep
    default: "false"
    description: Sleeping container while build is running, an easy way to debug
  - name: build-format
    description: The build format hint (jar / image), gives indication about what the pipeline needs to produce
    type: string
    default: ""
  - name: git-project-name
    description: The git project name which is at the origin of the push
    type: string
    default: ""
  - name: git-sha
    description: The git sha which is at the origin of the push
    type: string
    default: ""
  - name: git-url
    description: The repository url
    type: string
    default: ""
  - name: git-branch
    description: The repository branch at the origin of the push
    type: string
    default: ""
  - name: project-id
    description: The project id on gitlab
    type: string
    default: ""
  - name: container-images-repository
    description: Container images repository url
    type: string
    default: ""
  - name: git-api-endpoint
    description: Git provider API endpoint
    type: string
    default: ""
  - name: sonar-url
    description: Sonarqube Url
    type: string
    default: ""
  - name: continuous-delivery-namespace
    description: The CD namespace
    type: string
    default: ""
  - name: continuous-delivery-branch
    description: The CD source branch
    type: string
    default: "develop"
  - name: container-image-tag
    description: The container image tag to use (tag or hash)
    type: string
    default: ""
  - name: publish
    description: Whether or not to publish the project on nexus
    type: string
    default: "false"
  - name: notify-slack
    description: Whether or not to notify slack if the pipeline fails
    type: string
    default: "false"
  - name: tekton-url
    type: string
    description: "The tekton url"
  - name: build-tool
    description: Build tool override
    default: ""
    type: string
  - name: dockerfile
    description: The Dockerfile file name to look for
    type: string
    default: Dockerfile
  - name: node-version
    type: string
    description: The NodeJS version used in Tasks
  - name: node-tests-image
    type: string
    description: The image to run NodeJS tests
  - name: run-tests
    type: string
    description: Not implemented yet
  - name: chart-name
    type: string
    description: The chart helm name to use for continuous deployment
  - name: chart-version
    type: string
    description: The chart helm version to use for continuous deployment
  workspaces:
  - name: ws

  tasks:
  - name: init
    taskRef:
      name: devops-tools
    params:
      - name: script
        value: |
          echo "Push on $(params.git-branch) for $(params.git-project-name), id: $(params.project-id)"
          echo "---"
          echo "debug-sleep: $(params.debug-sleep)"
          echo "build-format: $(params.build-format)"
          echo "git-project-name: $(params.git-project-name)"
          echo "git-sha: $(params.git-sha)"
          echo "git-url: $(params.git-url)"
          echo "git-branch: $(params.git-branch)"
          echo "project-id: $(params.project-id)"
          echo "container-images-repository: $(params.container-images-repository)"
          echo "git-api-endpoint: $(params.git-api-endpoint)"
          echo "sonar-url: $(params.sonar-url)"
          echo "continuous-delivery-namespace: $(params.continuous-delivery-namespace)"
          echo "continuous-delivery-branch: $(params.continuous-delivery-branch)"
          echo "container-image-tag: $(params.container-image-tag)"
          echo "publish: $(params.publish)"
          echo "notify-slack: $(params.notify-slack)"
          echo "tekton-url: $(params.tekton-url)"
          echo "build-tool: $(params.build-tool)"
          echo "dockerfile: $(params.dockerfile)"
          echo "node-version: $(params.node-version)"
          echo "node-tests-image: $(params.node-tests-image)"
          echo "run-tests: $(params.run-tests)"
          echo "chart-name: $(params.chart-name)"
          echo "chart-version: $(params.chart-version)"
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws

  - name: detect-tag-to-build
    params:
      - name: container-images-repository
        value: "$(params.container-images-repository)"
      - name: git-project-name
        value: "$(params.git-project-name)"
      - name: container-image-tag
        value: "$(params.container-image-tag)"
      - name: git-branch
        value: "$(params.git-branch)"
    taskRef:
      name: detect-tag-to-build
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws

  - name: notify-build-running
    taskRef:
      name: gitlab-notify-build
    params:
      - name: git-sha
        value: $(params.git-sha)
      - name: project-id
        value: $(params.project-id)
      - name: gitlab-url
        value: $(params.git-api-endpoint)
      - name: tekton-url
        value: $(params.tekton-url)
      - name: ref
        value: $(params.git-branch)
    workspaces:
        - name: input
          workspace: ws
        - name: output
          workspace: ws
        - name: source
          workspace: ws
        - name: data
          workspace: ws

  - name: clone-projet
    runAfter:
      - notify-build-running
    taskRef:
      name: git-clone-branch
    params:
      - name: repository
        value: $(params.git-url)
      - name: branch
        value: $(params.git-branch)
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws

  - name: extract-build-config-from-source
    runAfter:
      - clone-projet
    taskRef:
      name: extract-build-config-from-source
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: directory
      value: $(params.git-project-name)
    - name: build-format-override
      value: $(params.build-format)
    - name: branch-override
      value: $(params.git-branch)
    - name: build-tool-override
      value: $(params.build-tool)
    - name: dockerfile-override
      value: $(params.dockerfile)
    - name: chart-name-override
      value: $(params.chart-name)
    - name: chart-version-override
      value: $(params.chart-version)

######################################################

  - name: setup-project
    runAfter:
      - extract-build-config-from-source
    taskRef:
      name: setup-project
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: directory
      value: $(params.git-project-name)
    - name: ci-preinstall
      value: $(tasks.extract-build-config-from-source.results.PREINSTALL)
    - name: branch
      value: $(params.git-branch)
    - name: build-tool
      value: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)

######################################################

  - name: npm-install-dependencies
    runAfter:
      - setup-project
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: yarn
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: IMAGE
      value: "node:$(params.node-version)"
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: ARGS
      value: ["install"]

  - name: npm-run-lint
    runAfter:
      - npm-install-dependencies
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: npm
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: IMAGE
      value: "node:$(params.node-version)"
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: ARGS
      value: ["run", "lint", "--if-present"]

  - name: npm-run-tests
    # when:
    # - input: $(params.run-tests)
    #   operator: in
    #   values:
    #     - "true"
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    runAfter:
      - npm-run-lint
    taskRef:
      name: npm
    retries: 1
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: IMAGE
      value: $(params.node-tests-image)
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: ARGS
      value: ["test", "-- --watch=false", "--if-present"]

  - name: npm-generate-code-coverage
    runAfter:
      - npm-run-tests
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: npm
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: IMAGE
      value: "node:$(params.node-version)"
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: ARGS
      value: ["run", "code-coverage", "--if-present"]
 
######################################################

  - name: gradle-build-and-tests
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
        operator: in
        values:
          - "gradle"
    runAfter:
      - setup-project
    taskRef:
      name: gradle
    params:
      - name: goals
        value: [build, test]
      - name: git-project-name
        value: $(params.git-project-name)
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws

######################################################

  - name: maven-compile-and-tests
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "maven"
    runAfter:
      - setup-project
    taskRef:
      name: maven
    workspaces:
    - name: source
      workspace: ws
    - name: maven-settings
      workspace: ws
    params:
    - name: CONTEXT_DIR
      value: $(params.git-project-name)
    - name: GOALS
      value: ["clean", "verify"]

######################################################

  - name: npm-code-analysis
    taskRef:
      name: sonarqube-scanner-edited
    runAfter:
      - npm-generate-code-coverage
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    params:
      - name: SONAR_HOST_URL
        value: $(params.sonar-url)
      - name: SONAR_PROJECT_KEY
        value: $(params.git-project-name)
      - name: DIRECTORY
        value: $(params.git-project-name)
      - name: BRANCH
        value: $(params.git-branch)
    workspaces:
      - name: source-dir
        workspace: ws
      - name: sonar-settings
        workspace: ws


  - name: gradle-code-analysis
    taskRef:
      name: sonarqube-scanner-edited
    runAfter:
      - gradle-build-and-tests
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
        operator: in
        values:
          - gradle
    params:
      - name: SONAR_HOST_URL
        value: $(params.sonar-url)
      - name: SONAR_PROJECT_KEY
        value: $(params.git-project-name)
      - name: DIRECTORY
        value: $(params.git-project-name)
      - name: BRANCH
        value: $(params.git-branch)
    workspaces:
      - name: source-dir
        workspace: ws
      - name: sonar-settings
        workspace: ws


  - name: maven-code-analysis
    taskRef:
      name: sonarqube-scanner-edited
    runAfter:
      - maven-compile-and-tests
    when:
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
        operator: in
        values:
          - maven
    params:
      - name: SONAR_HOST_URL
        value: $(params.sonar-url)
      - name: SONAR_PROJECT_KEY
        value: $(params.git-project-name)
      - name: DIRECTORY
        value: $(params.git-project-name)
      - name: BRANCH
        value: $(params.git-branch)
    workspaces:
      - name: source-dir
        workspace: ws
      - name: sonar-settings
        workspace: ws

######################################################

  - name: gradle-build-container-image
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
        - "gradle"
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "jib"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    runAfter:
    - gradle-build-and-tests
    taskRef:
      name: jib-gradle
    params:
      - name: BUILDER_IMAGE
        value: gradle:7.1-jdk11
      - name: IMAGE
        value: $(tasks.detect-tag-to-build.results.TARGET_IMAGE)
      - name: DIRECTORY
        value: $(params.git-project-name)
    workspaces:
      - name: source
        workspace: ws

######################################################

  - name: maven-build-container-image
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
        - "maven"
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "jib"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    runAfter:
    - maven-compile-and-tests
    taskRef:
      name: jib-maven
    params:
      - name: MAVEN_IMAGE
        value: maven:3.6.3-jdk-11
      - name: IMAGE
        value: $(tasks.detect-tag-to-build.results.TARGET_IMAGE)
      - name: DIRECTORY
        value: $(params.git-project-name)
    workspaces:
      - name: source
        workspace: ws

######################################################

  - name: builpack-build
    when:
      - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
        operator: in
        values:
          - "cnb"
      - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
        operator: in
        values:
          - "image"
    runAfter:
      - setup-project
    taskRef:
      name: buildpacks
    params:
      - name: APP_IMAGE
        value: $(tasks.detect-tag-to-build.results.TARGET_IMAGE)
      - name: SOURCE_SUBPATH
        value: $(params.git-project-name)
      - name: BUILDER_IMAGE
        value: $(tasks.extract-build-config-from-source.results.CNB_BUILDER)
      - name: ENV_VARS
        value: []
      - name: PROCESS_TYPE
        value: ""
    workspaces:
      - name: source
        workspace: ws

######################################################

  - name: buildah-build
    when:
      - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
        operator: in
        values:
          - "buildah"
      - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
        operator: in
        values:
          - "image"
    runAfter:
      - setup-project
    taskRef:
      name: buildah-edited
    params:
      - name: IMAGE
        value: $(tasks.detect-tag-to-build.results.TARGET_IMAGE)
      - name: DIRECTORY
        value: $(params.git-project-name)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name : FORMAT
        value: docker
    workspaces:
      - name: source
        workspace: ws

######################################################

  # TODO: see to refactor this copy/paste

  - name: continuous-delivery-gradle-jib-deploy
    runAfter:
    - gradle-build-container-image
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
        - "gradle"
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "jib"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    - input: $(params.git-branch)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
    taskRef:
      name: helm-deployment
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: release_name
      value: $(params.git-project-name)
    - name: release_namespace
      value: $(params.continuous-delivery-namespace)
    - name: overwrite_values
      value: "image.tag=$(tasks.detect-tag-to-build.results.TARGET_IMAGE_TAG)"
    - name: helm_values_param
      value: "--values ./values/default.yaml --values ./values/$(params.continuous-delivery-namespace).yaml"
    - name: subpath
      value: $(params.git-project-name)
    - name: chart_name
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_NAME)
    - name: chart_version
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_VERSION)

  - name: continuous-delivery-maven-jib-deploy
    runAfter:
    - maven-build-container-image
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
        - "maven"
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "jib"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    - input: $(params.git-branch)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
    taskRef:
      name: helm-deployment
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: release_name
      value: $(params.git-project-name)
    - name: release_namespace
      value: $(params.continuous-delivery-namespace)
    - name: overwrite_values
      value: "image.tag=$(tasks.detect-tag-to-build.results.TARGET_IMAGE_TAG)"
    - name: helm_values_param
      value: "--values ./values/default.yaml --values ./values/$(params.continuous-delivery-namespace).yaml"
    - name: subpath
      value: $(params.git-project-name)
    - name: chart_name
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_NAME)
    - name: chart_version
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_VERSION)


  - name: continuous-delivery-cnb-deploy
    runAfter:
    - builpack-build
    when:
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "cnb"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    - input: $(params.git-branch)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
    taskRef:
      name: helm-deployment
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: release_name
      value: $(params.git-project-name)
    - name: release_namespace
      value: $(params.continuous-delivery-namespace)
    - name: overwrite_values
      value: "image.tag=$(tasks.detect-tag-to-build.results.TARGET_IMAGE_TAG)"
    - name: helm_values_param
      value: "--values ./values/default.yaml --values ./values/$(params.continuous-delivery-namespace).yaml"
    - name: subpath
      value: $(params.git-project-name)
    - name: chart_name
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_NAME)
    - name: chart_version
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_VERSION)

  - name: continuous-delivery-buildah-deploy
    runAfter:
    - buildah-build
    when:
    - input: $(tasks.extract-build-config-from-source.results.IMAGE_BUILD_BUILD_TOOL)
      operator: in
      values:
        - "buildah"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
        - "image"
    - input: $(params.git-branch)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
    - input: $(tasks.extract-build-config-from-source.results.SHOULD_DEPLOY)
      operator: in
      values:
      - "true"
    taskRef:
      name: helm-deployment
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: release_name
      value: $(params.git-project-name)
    - name: release_namespace
      value: $(params.continuous-delivery-namespace)
    - name: overwrite_values
      value: "image.tag=$(tasks.detect-tag-to-build.results.TARGET_IMAGE_TAG)"
    - name: helm_values_param
      value: "--values ./values/default.yaml --values ./values/$(params.continuous-delivery-namespace).yaml"
    - name: subpath
      value: $(params.git-project-name)
    - name: chart_name
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_NAME)
    - name: chart_version
      value: $(tasks.extract-build-config-from-source.results.HELM_CHART_VERSION)

######################################################

  - name: deploy-nexus-gradle
    runAfter:
    - gradle-build-and-tests
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
        - "gradle"
    - input: $(tasks.extract-build-config-from-source.results.BUILD_FORMAT)
      operator: in
      values:
      - "package"
    - input: $(tasks.extract-build-config-from-source.results.BRANCH)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
      - "tag"
    taskRef:
      name: gradle
    params:
    - name: goals
      value: [currentVersion, publish]
    - name: git-project-name
      value: $(params.git-project-name)
    workspaces:
    - name: input
      workspace: ws
    - name: output
      workspace: ws
    - name: source
      workspace: ws
    - name: data
      workspace: ws

  - name: deploy-nexus-npm
    runAfter:
    - setup-project
    when:
    - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL)
      operator: in
      values:
      - "npm"
    - input: $(params.publish)
      operator: in
      values:
      - "true"
    - input: $(params.git-branch)
      operator: in
      values:
      - "$(params.continuous-delivery-branch)"
      - "main"
      - "master"
    taskRef:
      name: npm-publish
    params:
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: NPM_PUBLISHER
      value: npm-publisher
    workspaces:
    - name: source
      workspace: ws


######################################################

  - name: lighthouse-benchmarks
    runAfter:
    - npm-install-dependencies
    when:
      - input: $(tasks.extract-build-config-from-source.results.LIGHTHOUSE_CI)
        operator: in
        values:
          - "true"
      - input: $(params.git-branch)
        operator: in
        values:
        - "$(params.continuous-delivery-branch)"
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: npm
    workspaces:
    - name: source
      workspace: ws
    params:
    - name: IMAGE
      value: $(params.node-tests-image)
    - name: PATH_CONTEXT
      value: $(params.git-project-name)
    - name: ARGS
      value: ["run", "ci:lighthouse", "--if-present"]

  - name: upload-benchmarks-report
    runAfter:
    - lighthouse-benchmarks
    when:
      - input: $(tasks.extract-build-config-from-source.results.LIGHTHOUSE_CI)
        operator: in
        values:
          - "true"
      - input: $(params.git-branch)
        operator: in
        values:
        - "$(params.continuous-delivery-branch)"
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: gcs-upload-custom
    workspaces:
    - name: source
      workspace: ws
    - name: credentials
      workspace: ws
    params:
    - name: path
      value: $(params.git-project-name)/lhci
    - name: bucketAddressConfigMap
      value: tekton-storage
    - name: bucketAddressConfigMapKeyName
      value: address
    - name: serviceAccountSecretName
      value: gcr-admin
    - name: serviceAccountSecretKeyName
      value: gcr-admin.json

######################################################

  - name: run-cypress-ti
    runAfter:
      - npm-install-dependencies
    when:
      - input: $(tasks.extract-build-config-from-source.results.CYPRESS_TI)
        operator: in
        values:
          - "true"
      - input: $(tasks.extract-build-config-from-source.results.BUILD_TOOL_TOO)
        operator: in
        values:
          - "npm"
    taskRef:
      name: devops-tools
    retries: 1
    params:
      - name: image
        value: cypress/included:8.4.0
      - name: script
        value: |
          #!/usr/bin/env bash
          cd $(workspaces.source.path)/$(params.git-project-name)
          cypress run --env fileConfig=integration --browser chrome --headless
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws


######################################################

  - name: debug-sleep
    when:
      - input: $(params.debug-sleep)
        operator: in
        values:
          - "true"
    taskRef:
      name: devops-tools
    params:
      - name: script
        value: |
          #!/usr/bin/env bash
          echo "Sleeping 600 seconds !"
          sleep 600
    workspaces:
      - name: input
        workspace: ws
      - name: output
        workspace: ws
      - name: source
        workspace: ws
      - name: data
        workspace: ws

  finally:
      - name: notify-build-status
        taskRef:
          name: gitlab-notify-build
        params:
          - name: git-sha
            value: $(params.git-sha)
          - name: aggregateStatus
            value: "$(tasks.status)"
          - name: project-id
            value: $(params.project-id)
          - name: gitlab-url
            value: $(params.git-api-endpoint)
          - name: tekton-url
            value: $(params.tekton-url)
          - name: ref
            value: $(params.git-branch)
        workspaces:
          - name: input
            workspace: ws
          - name: output
            workspace: ws
          - name: source
            workspace: ws
          - name: data
            workspace: ws

      - name: notify-slack
        taskRef:
          name: send-to-webhook-slack
        when:
        - input: "$(tasks.status)"
          operator: in
          values:
          - "Failed"
        - input: $(params.git-branch)
          operator: in
          values:
          - "$(params.continuous-delivery-branch)"
        - input: $(params.notify-slack)
          operator: in
          values:
          - "true"
        params:
          - name: webhook-secret
            value: slack-webhook-secret
          - name: message
            value: "Pipeline for *$(params.git-project-name)* has failed. <$(params.tekton-url)/#/namespaces/tekton-pipelines/pipelineruns/$(tasks.extract-build-config-from-source.results.PIPELINERUN_NAME)|Check Pipeline>"
