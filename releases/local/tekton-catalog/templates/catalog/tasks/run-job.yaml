apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-job
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: job, cronjob
    tekton.dev/displayName: "run-job"
spec:
  description: >-
    Runs a Kubernetes Job from a Tekton Pipeline
  volumes:
    - name: kubeconfig-internal-gcloud
      secret:
        secretName: kubeconfig-internal-gcloud
    - name: tekton
      secret:
        secretName: tekton
  params:
    - name: run-task
      description: An easy way to skip task
      type: string
      default: "true"

    - name: source-namespace
      description: The namespace of the cronjob source
      type: string
      default: ""

    - name: source-name
      description: The name of the cronjob source
      type: string
      default: ""

    - name: job-name
      description: The name of the created job
      type: string
      default: ""

    - name: synchronous
      description: Wait or run job in background
      type: string
      default: "true"

    - name: timeout
      description: Job timeout
      type: string
      default: "300s"

    - name: image
      description: The image used by the task
      type: string
      default: neo9sas/devops-tools:v1.5.0

    - name: sleep
      description: The PR URL
      type: string
      default: "false"

    - name: sleep-time
      description: The PR URL
      type: string
      default: "600"

  steps:
    - name: run-job
      image: $(params.image)
      imagePullPolicy: Always
      command: ["/bin/bash"]
      volumeMounts:
        - name: kubeconfig-internal-gcloud
          mountPath: /tmp/kubeconfig-internal-gcloud
        - name: tekton
          mountPath: /tmp/tekton
      env:
        - name: KUBECONFIG
          value: /tmp/kubeconfig-internal-gcloud/kubeconfig-internal-gcloud.yaml
      args:
        - -c
        - |
          #!/usr/bin/env bash

          set -x

          if [[ "$(params.sleep)" == "true" ]]; then
            sleep $(params.sleep-time)
          fi

          jobName=$(params.job-name)-$(date +%s)
          namespace=$(params.source-namespace)
          synchronous=$(params.synchronous)
          timeout=$(params.timeout)
          sourceName=$(params.source-name)

          kubectl -n ${namespace} create job --from=${sourceName} ${jobName}
          if [[ "${synchronous}" == "true" ]]; then
            kubectl -n ${namespace} wait --for=condition=complete --timeout=${timeout} job/${jobName}
          fi
