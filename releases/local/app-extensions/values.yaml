cloud:
  provider: gcp # aws|gcp
  default:
    location: europe-west1

cluster:
  config:
    name: kube-core
    domain: dev.kube-core.io

patch:
  serviceAccountName: my-patch-operator-sa

resource:
  eck-elasticsearch:
    enabled: false
    storageSize: 20Gi
    storageClassName: gcp-sc-delete-wait
    esJavaOpts: -Xms500m -Xmx500m
    replicas: 3
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        memory: 1Gi
  eck-kibana:
    enabled: false
  slack-channel:
    enabled: false
    # channelName: "my-channel-with-prefix"
    # channelNameOverride: "my-channel-without-prefix"
    # topic: "default"
    # description: "Default slack channel"
    # users:
    # - user@domain.tld
  prometheus-servicemonitor:
    enabled: false
  chaos-schedule:
    enabled: false
    pause: false
    schedule: "* * * * *"
    startingDeadlineSeconds: 604800
    concurrencyPolicy: Forbid
    historyLimit: 1
    type: PodChaos
    podChaos:
      mode: fixed-percent
      value: "50"
      action: pod-kill
      duration: 10s

  gcp-backendbucket:
    enabled: false
  gcp-bucket:
    enabled: false
  gcp-bucketpolicy:
    enabled: false
  gcp-globaladdress:
    enabled: false
  gcp-globalforwardingrule:
    enabled: false
  gcp-managedsslcertificate:
    enabled: false
  gcp-managedzone:
    enabled: false
  gcp-projectiamcustomrole:
    enabled: false
  gcp-projectiammember:
    enabled: false
  gcp-recordset:
    enabled: false
  gcp-serviceaccount:
    enabled: false
  gcp-serviceaccountiammember:
    enabled: false
  gcp-serviceaccountkey:
    enabled: false
  gcp-serviceaccountpolicy:
    enabled: false
  gcp-targethttpproxy:
    enabled: false
  gcp-targethttpsproxy:
    enabled: false
  gcp-urlmap:
    enabled: false
  keda-scaledobject:
    enabled: false
  kube-ingress:
    enabled: false
    defaultRules: true
    tls: true
    # ingressClassName: nginx
    # name: my-app
    # subDomain: app
    # subDomainBase: dev
    # subDomainOverride: app.dev
    # serviceName: my-service
    # portName: http-rest
    # portNumber: 80
    # customSecretName: test
    # host: my.domain.tld
    # path: /test
    # customRules:
    # - host: my.extra.host
    #   http:
    #     paths:
    #       - path: /path
    #         pathType: Prefix
    #         backend:
    #           service:
    #             name: svc
    #             port:
    #               name: grpc
  patch-recordsetinjectipfromlb:
    enabled: false
  prometheus-rule:
    enabled: false
  rabbitmq-binding:
    enabled: false
  rabbitmq-cluster:
    enabled: false
  rabbitmq-exchange:
    enabled: false
  rabbitmq-permission:
    enabled: false
  rabbitmq-policy:
    enabled: false
  rabbitmq-queue:
    enabled: false
  rabbitmq-user:
    enabled: false
  rabbitmq-vhost:
    enabled: false
  sloth-prometheusservicelevel:
    enabled: false
  pyrra-servicelevelobjective:
    enabled: false
    target: "99"
    window: "30d"
    indicatorType: "ratio" # Can also be "latency"
    description: Pyrra's API requests and response errors over time grouped by route.
    # grouping:
    # - path
    # targetType: "custom" # Can be "ingress" or "service"
    # errorQuery: my_error_query
    # totalQuery: my_total_query
  sloth-prometheusservicelevel:
    enabled: false
    slos: []
    # slos:
    #   test-slo:
    #     objective: 99
    #     description: "SLO: My custom SLO"
    #     alertDescription: "My SLI is below the thresold!"
    #     errorQuery: my_error_query
    #     totalQuery: my_total_query
    ingress:
      enabled: false
      objective: 99
      description: "SLO: HTTP requests response availability"
    # service: sloth-servicelevel
    # type: app
    # env: default
  prometheus-rule:
    enabled: false
    namespaceSuffix: false
    prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
    rules: []
    # rules:
    # - expr: rabbitmq_queue_messages{namespace="namespace", queue="my-queue"}
    #   record: "my_namespace_my_api_rabbitmq_my_queue_queue_messages"
    rabbitmq:
      enabled: false
      queues:
        default: false # If true, generates rules for queues based on API name
        scaling: []
        # scaling:
        # - name: my-queue
    cpuAvg:
      enabled: false
      window: 1m
      podQuery: ""
      # query: my_query
      # container: elasticsearch
      # namespace: logging-es-http
    memoryAvg:
      enabled: false
      podQuery: ""
      # query: my_query
      # container: elasticsearch
      # namespace: logging-es-http
      # name: logging-es-http
    ingressAccessFreq:
      enabled: false
      window: 1m
      # query: my_query
      # namespace: logging-es-http
      # name: logging-es-http
    ingressControllerAccessFreq:
      enabled: false
      istio: false
      # controllerClass: "nginx"
      window: 1m
      # query: my_query
      # namespace: logging-es-http
      # name: logging-es-http
    serviceAccessFreq:
      enabled: false
      window: 1m
      # query: my_query
      # namespace: logging
      # name: logging-es-http
  keda-scaledobject:
    enabled: false
    namespaceSuffix: false
    minReplicaCount: 1
    maxReplicaCount: 10
    prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: keda-scaledobject
    extraTriggers: []
  # extraTriggers:
  # - type: prometheus
  #   metricType: Value
  #   metadata:
  #     serverAddress: http://prometheus-operated.monitoring.svc.cluster.local:9090
  #     metricName: "my_metric"
  #     threshold: "1"
  #     query: "my_prom_query"
    rabbitmq:
      enabled: false
      default:
        enabled: false
        in: 1
        out: 1
      queues: []
      # queues:
      # - name: my-queue
      #   value: 1
    cpuAvg:
      enabled: false
      threshold: 0.90
    memoryAvg:
      enabled: false
      threshold: 0.90
    ingressAccessFreq:
      enabled: false
      threshold: 100
    ingressControllerAccessFreq:
      enabled: false
      threshold: 100
    serviceAccessFreq:
      enabled: false
      threshold: 100
      # query: my_custom_prometheus_query
      # metricName: my_custom_metric_name

resources: {}
  # pyrra-servicelevelobjective:
  #   test-12-a:
  #     enabled: true
  # prometheus-rule:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true
  # keda-scaledobject:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true
  # sloth-servicelevel:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true




# resources:

#   rabbitmq-user:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev
#       tags:
#       - policymaker
#       - monitoring
#       - management
#       - administrator

#   rabbitmq-permission:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev

#       # Custom user
#       userName: my-rabbitmq-user-name
#       userRef: my-rabbitmq-user-ref

#       # Permissions defaults to read ".*"
#       read: true
#       write: true
#       configure: true

#       # Custom permissions
#       customPermissions:
#         read: "custom"

#   rabbitmq-vhost:
#     nk-api: {}

#   rabbitmq-cluster:
#     nk-api: {}

#   rabbitmq-policy:
#     nk-api: {}


#   rabbitmq-queue:
#     nk-api: {}

#   rabbitmq-exchange:
#     nk-api: {}

#   rabbitmq-binding:
#     nk-api: {}
#       # type: direct
#       # arguments:
#       #   alternate-exchange: my-alt-exchange




# projectIAMCustomRoles:
#   gcr-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get
#     - cloudbuild.builds.get
#     - cloudbuild.builds.list

#   gcs-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get

# projectIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccountIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccounts:
#   kube-core: {}

# serviceAccountPolicies:
#  app: {}
#   # defaultRoles:
#   # - roles/viewer
#   # - roles/editor
#   # defaultRole: false
#   # role: roles/viewer
#   # sa: custom-sa
#   # roles:
#   # - role: roles/editor
#   #   serviceAccountMemberRefs:
#   #   - custom-sa

# serviceAccountKeys:
#   app: {}

# buckets:
#   app: {}

# bucketPolicies:
#   app: {}
#     # bucketRef: SuperBucket
#     # adminRef: test-admin
#     # public: true
#     # admin: true
#     # roles:
#     # - role: roles/storage.objectViewer
#     #   members:
#     #     - test-member

# backendBuckets:
#   app: {}
#     # bucketName: app-bucket-name
#     # enableCdn: true

# globalAdresses:
#   app: {}
#     # deletionPolicy: ""
#     # addressType: ""
#     # ipVersion: ""

# globalForwardingRules:
#   app: {}
#     # loadBalancingScheme: ""
#     # target:
#     #   type: targetHttpProxies
#     #   name: target-proxy-name
#     # ipAddress: global-adress-name

# targetHttpProxies:
#   app: {}
#     # urlMap: urlMap-name

# targetHttpsProxies:
#   app: {}
#     # urlMap: urlMap-name
#     # managedSslCertificates:
#     # - certificat-1
#     # - certificat-2

# urlMaps:
#   app: {}
#     # hostRule:
#     #   - hosts:
#     #     - app.domain.tld
#     #     pathMatcher: pathmatcher-name
#     # pathMatcher:
#     #   - defaultService: backend-bucket-name
#     #     name: pathmatcher-name

# recordSets:
#   app: {}
#     # managedZone: managed-zone-name
#     # rootDnsName: app.domain.tld.
#     # rrdatas: []
#     # # - 1.1.1.1
#     # # - 2.2.2.2
#     # patch:
#     #   injectIpFromLb: false
#     #   globalAddress: global-address-name

# managedSslCertificates:
#   app: {}
#     # domains: []
#     #   # - app.domain.tld
#     #   # - app2.domain.tld
