# # TODO: Rework those
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: cert-manager-restrict-issuer
#   annotations:
#     policies.kyverno.io/title: Restrict issuer
#     policies.kyverno.io/category: Cert-Manager
#     policies.kyverno.io/severity: medium
#     policies.kyverno.io/subject: Certificate
#     policies.kyverno.io/description: >-
#       Certificates for trusted domains should always be steered to a controlled issuer to
#       ensure the chain of trust is appropriate for that application. Users may otherwise be
#       able to create their own issuers and sign certificates for other domains. This policy
#       ensures that a certificate request for a specific domain uses a designated ClusterIssuer.
# spec:
#
#   background: true
#   rules:
#   - name: restrict-corp-cert-issuer
#     match:
#       resources:
#         kinds:
#         - Certificate
#     validate:
#       message: When requesting a cert for this domain, you must use our corporate issuer.
#       pattern:
#         spec:
#           (dnsNames): ["*.corp.com"]
#           issuerRef:
#             name: our-corp-issuer
#             kind: ClusterIssuer
#             group: cert-manager.io

# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: scale-deployment-zero
#   annotations:
#     policies.kyverno.io/title: Scale Deployment to Zero
#     policies.kyverno.io/category: other
#     policies.kyverno.io/severity: medium
#     policies.kyverno.io/subject: Deployment
#     kyverno.io/kyverno-version: 1.7.0
#     policies.kyverno.io/minversion: 1.7.0
#     kyverno.io/kubernetes-version: "1.23"
#     policies.kyverno.io/description: >-
#       If a Deployment's Pods are seen crashing multiple times it usually indicates
#       there is an issue that must be manually resolved. Removing the failing Pods and
#       marking the Deployment is often a useful troubleshooting step. This policy watches
#       existing Pods and if any are observed to have restarted more than
#       once, indicating a potential crashloop, Kyverno scales its parent deployment to zero
#       and writes an annotation signaling to an SRE team that troubleshooting is needed.
#       It may be necessary to grant additional privileges to the Kyverno ServiceAccount,
#       via one of the existing ClusterRoleBindings or a new one, so it can modify Deployments.
# spec:
#   rules:
#   - name: annotate-deployment-rule
#     match:
#       any:
#       - resources:
#           kinds:
#           - v1/Pod.status
#     preconditions:
#       all:
#       - key: "{{`{{request.operation}}`}}"
#         operator: Equals
#         value: UPDATE
#       - key: "{{`{{request.object.status.containerStatuses[0].restartCount}}`}}"
#         operator: GreaterThan
#         value: 1
#     context:
#     - name: rsname
#       variable:
#         jmesPath: "request.object.metadata.ownerReferences[0].name"
#         default: ''
#     - name: deploymentname
#       apiCall:
#         urlPath: "/apis/apps/v1/namespaces/{{`{{request.namespace}}`}}/replicasets"
#         jmesPath: "items[?metadata.name=='{{`{{rsname}}`}}'].metadata.ownerReferences[0].name | [0]"
#     mutate:
#       targets:
#         - apiVersion: apps/v1
#           kind: Deployment
#           name: "{{`{{deploymentname}}`}}"
#           namespace: "{{`{{request.namespace}}`}}"
#       patchStrategicMerge:
#         metadata:
#           annotations:
#             sre.corp.org/troubleshooting-needed: "true"
#         spec:
#           replicas: 0

# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: unique-ingress-host-and-path
#   annotations:
#     policies.kyverno.io/title: Unique Ingress Host and Path
#     policies.kyverno.io/category: Sample
#     policies.kyverno.io/severity: medium
#     policies.kyverno.io/subject: Ingress
#     kyverno.io/kyverno-version: 1.7.0
#     policies.kyverno.io/minversion: 1.6.0
#     kyverno.io/kubernetes-version: "1.23"
#     policies.kyverno.io/description: >-
#       Similar to the ability to check the uniqueness of hosts and paths independently,
#       it is possible to check for uniqueness of them both together across a cluster.
#       This policy ensures that no Ingress can be created or updated unless it is
#       globally unique with respect to host plus path combination.
# spec:
#
#
#   rules:
#     - name: check-host-path-combo
#       match:
#         any:
#         - resources:
#             kinds:
#               - Ingress
#       preconditions:
#         all:
#         - key: "{{`{{ request.operation }}`}}"
#           operator: NotEquals
#           value: DELETE
#       context:
#         - name: rules
#           apiCall:
#             urlPath: "/apis/networking.k8s.io/v1/ingresses"
#             jmesPath: "items[].spec.rules[]"
#       validate:
#         message: "The Ingress host and path combination must be unique across the cluster."
#         foreach:
#         - list: "request.object.spec.rules[]"
#           deny:
#             conditions:
#               all:
#               - key: "{{`{{ element.http.paths[].path }}`}}"
#                 operator: AnyIn
#                 value: "{{`{{ rules[?host=='{{element.host}}'][].http.paths[].path }}`}}"
# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: unique-ingress-path
#   annotations:
#     policies.kyverno.io/title: Unique Ingress Path
#     policies.kyverno.io/category: Sample
#     policies.kyverno.io/severity: medium
#     policies.kyverno.io/subject: Ingress
#     policies.kyverno.io/minversion: 1.6.0
#     policies.kyverno.io/description: >-
#       Just like the need to ensure uniqueness among Ingress hosts, there is a need to have the paths
#       be unique as well. This policy checks an incoming Ingress to ensure its root path does not conflict with another
#       root path in a different Namespace. It requires that incoming Ingress resources have a single
#       rule with a single path only and assumes the root path is specified explicitly in an
#       existing Ingress rule (ex., when blocking /foo/bar /foo must exist by itself and not part of
#       /foo/baz).
# spec:
#
#
#   rules:
#     - name: check-path
#       match:
#         any:
#         - resources:
#             kinds:
#               - Ingress
#       context:
#         # Looks up the Ingress paths across the whole cluster.
#         - name: allpaths
#           apiCall:
#             urlPath: "/apis/networking.k8s.io/v1/ingresses"
#             jmesPath: "items[].spec.rules[].http.paths[].path"
#         # Looks up the Ingress paths in the same Namespace where the incoming request is targeted.
#         - name: nspath
#           apiCall:
#             urlPath: "/apis/networking.k8s.io/v1/namespaces/{{`{{request.object.metadata.namespace}}`}}/ingresses"
#             jmesPath: "items[].spec.rules[].http.paths[].path"
#       preconditions:
#         any:
#         - key: "{{`{{request.operation}}`}}"
#           operator: Equals
#           value: "CREATE"
#       validate:
#         message: >-
#           The root path /{{`{{request.object.spec.rules[].http.paths[].path | [0] | to_string(@) | split(@, '/') | [1]}}`}} exists
#           in another Ingress rule elsewhere in the cluster.
#         deny:
#           conditions:
#             all:
#               # Deny if the root path of the request exists somewhere else in the cluster other than the same Namespace.
#               - key: /{{`{{request.object.spec.rules[].http.paths[].path | [0] | to_string(@) | split(@, '/') | [1]}}`}}
#                 operator: AnyIn
#                 value: "{{`{{allpaths}}`}}"
#               - key: /{{`{{request.object.spec.rules[].http.paths[].path | [0] | to_string(@) | split(@, '/') | [1]}}`}}
#                 operator: AnyNotIn
#                 value: "{{`{{nspath}}`}}"

# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: unique-ingress-host
#   annotations:
#     policies.kyverno.io/title: Unique Ingress Host
#     policies.kyverno.io/category: Sample
#     policies.kyverno.io/severity: medium
#     policies.kyverno.io/subject: Ingress
#     policies.kyverno.io/minversion: 1.3.2
#     policies.kyverno.io/description: >-
#       An Ingress host is a URL at which services may be made available externally. In most cases,
#       these hosts should be unique across the cluster to ensure no routing conflicts occur.
#       This policy checks an incoming Ingress resource to ensure its hosts are unique to the cluster.
#       It also ensures that only a single host may be specified in a given manifest.
# spec:
#
#
#   rules:
#     - name: check-single-host
#       match:
#         resources:
#           kinds:
#             - Ingress
#       context:
#         - name: hosts
#           apiCall:
#             urlPath: "/apis/networking.k8s.io/v1/ingresses"
#             jmesPath: "items[].spec.rules[].host"
#       preconditions:
#         all:
#         - key: "{{`{{ request.operation }}`}}"
#           operator: Equals
#           value: CREATE
#         - key: "{{`{{ request.object.spec.rules[].host }}`}}"
#           operator: In
#           value: "{{`{{ hosts }}`}}"
#       validate:
#         message: "The Ingress host name must be unique."
#         deny: {}
#     - name: deny-multiple-hosts
#       match:
#         resources:
#           kinds:
#             - Ingress
#       preconditions:
#         all:
#         - key: "{{`{{ request.operation }}`}}"
#           operator: Equals
#           value: CREATE
#         - key: "{{`{{ request.object.spec.rules[].host | length(@)}}`}}"
#           operator: GreaterThan
#           value: 1
#       validate:
#         message: "An Ingress resource may only contain a single host entry."
#         deny: {}


# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: block-updates-deletes
#   annotations:
#     policies.kyverno.io/title: Block Updates and Deletes
#     policies.kyverno.io/category: Sample
#     policies.kyverno.io/subject: RBAC
#     policies.kyverno.io/description: >-
#       Kubernetes RBAC allows for controls on kinds of resources or those
#       with specific names. But it does not have the type of granularity often
#       required in more complex environments. This policy restricts updates and deletes to any
#       Service resource that contains the label `protected=true` unless by
#       a cluster-admin.
# spec:
#   validationFailureAction: enforce
#
#   rules:
#   - name: block-updates-deletes
#     match:
#       resources:
#         kinds:
#         - Service
#         selector:
#           matchLabels:
#             protected: "true"
#     exclude:
#       clusterRoles:
#       - cluster-admin
#     validate:
#       message: "This resource is protected and changes are not allowed. Please seek a cluster-admin."
#       deny:
#         conditions:
#           any:
#             - key: "{{`{{request.operation}}`}}"
#               operator: In
#               value:
#               - DELETE
#               - UPDATE
