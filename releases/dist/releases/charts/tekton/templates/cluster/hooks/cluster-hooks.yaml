apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: cluster-hooks
  namespace: tekton-pipelines
spec:
  # serviceType: ClusterIP
  serviceAccountName: tekton
  triggers:
    ### Develop
    ## Push Hook
    - name: cluster-push-develop
      interceptors:
      - name: "Validate GitLab Payload & Filter on EventType"
        ref:
          name: "gitlab"
          kind: ClusterInterceptor
        params:
          - name: secretRef
            value:
              secretName: {{ (index .Values.releases "tekton" "secrets" "git-webhooks-token" "secretRef" "name") }}
              secretKey: {{ (index .Values.releases "tekton" "secrets" "git-webhooks-token" "secretRef" "key") }}
          - name: eventTypes
            value:
              - "Push Hook"
              - "Tag Push Hook"
      - name: "Apply overlays"
        ref:
          name: "cel"
          kind: ClusterInterceptor
        params:
        - name: "overlays"
          value:
          #filter: "body.ref == 'refs/heads/develop'"
          # overlays:
              #The build format hint (jar / image), gives indication about what the pipeline needs to produce. default: image
            - key: build_format
              expression: "requestURL.parseURL().rawQuery.contains('buildFormat=') ? requestURL.parseURL().query['buildFormat'] : 'image'"
              #The build tool to use (docker, npm, gradle, maven). if not specified, task extract-build-config-from-source will detect it
            - key: build_tool
              expression: "requestURL.parseURL().rawQuery.contains('buildTool=') ? requestURL.parseURL().query['buildTool'] : ''"
              #whether to publish on nexus or not. default: false
            - key: publish
              expression: "requestURL.parseURL().rawQuery.contains('publish=') ? requestURL.parseURL().query['publish'] : 'false'"
              #turn on to notify slack. default: false
            - key: notify-slack
              expression: "requestURL.parseURL().rawQuery.contains('notify-slack=') ? requestURL.parseURL().query['notify-slack'] : 'false'"
              #override dockerfile name. default: Dockerfile
            - key: dockerfile
              expression: "requestURL.parseURL().rawQuery.contains('dockerfile=') ? requestURL.parseURL().query['dockerfile'] : 'Dockerfile'"
              #used to debug pipeline. default: false
            - key: debug_sleep
              expression: "requestURL.parseURL().rawQuery.contains('debugSleep=') ? requestURL.parseURL().query['debugSleep'] : 'false'"
            - key: git_branch
              expression: "body.ref.startsWith('refs/tags/') ? body.ref.replace('refs/tags/', '') : body.ref.replace('refs/heads/', '')"
            - key: git_branch_sanitized
              expression: "body.ref.replace('refs/heads/', '').replace('refs/tags/', '').replace('/', '-').lowerAscii()"
            - key: container_image_tag
              expression: "body.ref.startsWith('refs/tags/') ? body.ref.replace('refs/tags/', '') : 'v-' + body.checkout_sha"
              #used to specify the chart name. default: neo9charts/n9-api
            - key: chart-name
              expression: "requestURL.parseURL().rawQuery.contains('chartName=') ? requestURL.parseURL().query['chartName'] : ''"
              #used to specify the chart name. default: latest
            - key: chart-version
              expression: "requestURL.parseURL().rawQuery.contains('chartVersion=') ? requestURL.parseURL().query['chartVersion'] : ''"
      bindings:
        - ref: parse-gitlab-push-hook
        - ref: parse-gitlab-push-hook-extensions
        - ref: parse-param-debug-extensions
        - ref: parse-build-format-from-query
        - ref: parse-custom-config  # contains customer specific values
        - ref: parse-param-publish-extensions
        - ref: parse-param-notify-slack-extensions
        - ref: parse-param-dockerfile-extensions
        - ref: parse-param-chart-extensions
      template:
        ref: cluster-push-develop
