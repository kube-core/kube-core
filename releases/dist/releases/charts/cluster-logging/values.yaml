secrets: {}
cloud: {}
cluster:
  logging:
    config:
      bucketPrefixOverride: ""
      indexTemplate:
        secretRef:
          name: logstash-default-index-template
          key: template
        default: |
          {
            "order": 200,
            "settings": {
              "index.mapping.ignore_malformed": true,
              "index.query.default_field": [
                "parsed_log.message",
                "parsed_log.error"
              ],
              "index.refresh_interval": "30s",
              "index.search.slowlog.threshold.query.debug": "0ms",
              "index.search.slowlog.threshold.query.info": "1s",
              "index.search.slowlog.threshold.fetch.debug": "0ms",
              "index.search.slowlog.threshold.fetch.info": "1s",
              "index.translog.sync_interval": "1m",
              "index.number_of_shards": 4,
              "index.number_of_replicas": 1,
              "index.analysis": {
                "analyzer": {
                  "log_analyzer": {
                    "type": "pattern",
                    "pattern": "\\W+",
                    "lowercase": true
                  }
                },
                "normalizer": {
                  "lowercase_normalizer": {
                    "type": "custom",
                    "filter": [
                      "lowercase"
                    ]
                  }
                }
              }
            },
            "mappings": {
              "dynamic": true,
              "dynamic_templates": [
                {
                  "no_index_fields_past_depth_7": {
                    "path_match": "*.*.*.*.*.*.*.*",
                    "match_mapping_type": "object",
                    "mapping": {
                      "type": "object",
                      "enabled": false
                    }
                  }
                },
                {
                  "create_keyword_index_for_all_string_fields": {
                    "match": "*",
                    "match_mapping_type": "string",
                    "mapping": {
                      "type": "keyword",
                      "normalizer": "lowercase_normalizer",
                      "ignore_above": 1000
                    }
                  }
                }
              ],
              "properties": {
                "@timestamp": {
                  "type": "date"
                },
                "parsed_log": {
                  "properties": {
                    "thread": {
                      "type": "text",
                      "analyzer": "log_analyzer",
                      "norms": false,
                      "similarity": "boolean",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "message": {
                      "type": "text",
                      "analyzer": "log_analyzer",
                      "norms": false,
                      "similarity": "boolean"
                    },
                    "error": {
                      "type": "text",
                      "analyzer": "log_analyzer",
                      "norms": false,
                      "similarity": "boolean"
                    },
                    "status": {
                      "type": "keyword"
                    },
                    "size": {
                      "type": "long"
                    },
                    "iteration": {
                      "type": "keyword"
                    }
                  }
                },
                "kubernetes": {
                  "properties": {
                    "container_name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "container_image": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "container_image_id": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "host": {
                      "type": "text",
                      "index": false,
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "pod_id": {
                      "type": "text",
                      "index": false,
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "pod_ip": {
                      "type": "text",
                      "index": false,
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "pod_name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "namespace_name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "namespace_id": {
                      "type": "text",
                      "index": false,
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "normalizer": "lowercase_normalizer"
                        }
                      }
                    },
                    "labels": {
                      "type": "object",
                      "subobjects": false,
                      "properties": {
                        "app.kubernetes.io/name": {
                          "type": "keyword"
                        }
                      }
                    },
                    "annotations": {
                      "type": "object",
                      "subobjects": false
                    }
                  }
                }
              }
            }
          }
    outputs:
      outputs: [] # Not implemented
      config:
        txtLogsPath: "logs/${tag}/"
        txtObjectKeyFormat: "%{path}%{time_slice}_%{index}.%{file_extension}"
        path: "logs/%Y-%m-%d/${tag}"

        # TODO: Merge those two and make them completely implicit, with possibility to overwrite
        object_key_format: "%{path}-%{time_slice}-%{uuid_flush}-%{index}.%{file_extension}" # GCS
        tekton_object_key_format: "%{path}/%{time_slice}-%{uuid_flush}-%{index}.%{file_extension}" # GCS
        s3_object_key_format: "%{path}-%{time_slice}-%{uuid_flush}-%{index}.%{file_extension}" # S3
        # object_key_format: "%{path}/%{index}.%{file_extension}" # => 159.log
        # object_key_format: "%{path}/%{time_slice}%{uuid_hash}%{index}.%{file_extension}" => my-api2022081514202.json
        # object_key_format: "%{path}/%{index}-${chunk_id}.log" # => 0-5e6405b27529c86fcfb00cd1bebb98be.log
        buffer:
          tags: tag,time
          timekey: 1m
          timekey_wait: 1m
          timekey_use_utc: true

          # Flush Configuration
          flush_mode: interval
          flush_interval: 60s

          flush_thread_count: 16 # Multithreaded requires to use chunk-id with s3 to avoid collisions and data loss
          flush_at_shutdown: true # This specifies whether to flush/write all buffer chunks on shutdown or not
          disable_chunk_backup: true # Instead of storing unrecoverable chunks in the backup directory, just discard them. This option is new in Fluentd v1.2.6.

          # Buffer at most 128 buffer chunks. Make sure you have enough disk space
          # to store buffer_chunk_limit * buffer_queue_limit bytes.
          # 32MB * 128 = 4096MB.
          # 32MB * 512 = 16384MB.
          # 8MB * 1024 = 8192MB.
          # 8MB * 2048 = 16384MB.
          chunk_limit_records: 512 # The max number of events that each chunks can store in it
          chunk_limit_size: 32M # The max size of each chunks: events will be written into chunks until the size of chunks become this size (default: 8MB)
          # problem: #0 [clusterflow:logging:app:clusteroutput:logging:app-es] chunk size limit exceeds for an emitted event stream: 2426records

          # chunk_limit_records: 2048
          # chunk_limit_size: 8M

          total_limit_size: 16384M

          # Use the following instead if you need to make sure all logs are processed
          # overflow_action: block
          overflow_action: drop_oldest_chunk # drops/purges the oldest chunk to accept newly incoming chunk.

          retry_type: exponential_backoff
          retry_timeout: 1h

          # Here in case retry_type is changed to something else than exponential_backoff
          retry_max_interval: "30"
          retry_forever: false # Don't retry forever
    flows:
      flows: []
      # - name: dev
      #   namespaces:
      #   - dev
      dynamicFlowsEnabled: true
      dynamicOutputsEnabled: true
      simpleDynamicFlowsOutputMapping: true
      extraFilters: []
      default:
        enabled: false
        nullout: true
        stdout: false
        matchAll: false
        namespaces: []
        extraFilters: []
        # - record_modifier:
        #     records:
        #       stuff: blabla
        extraMatchRules: []
        # - select:
        #     labels:
        #       my-label: test
        extraOutputs: []
        outputs:
          default:
            enabled: true
            es: false
            minio: false
          dynamic:
            enabled: false
            es: false
      config:
        legacyOutputRefs: false
        forceDefault: false
        forceDynamic: false
        tagFormat: ${namespace_name}/${pod_name}/${container_name}
        removeKeys: "$.kubernetes.labels.app,$.kubernetes.labels.component,$.kubernetes.labels.chart,$.kubernetes.labels.version,$.kubernetes.labels.istio,$.kubernetes.labels.instance"
        whitelist:
          enabled: true
          keys: "tag,cluster,log_type,kubernetes,stream,time,parsed_log"
        dedot: false
        parser:
          # key_name: log
          key_name: message
          remove_key_name_field: false
          reserve_data: true
          reserve_time: true
          # inject_key_prefix: message
          hash_value_field: parsed_log
          parse:
            type: multi_format
            patterns:
            - format: nginx
            - format: json
            - format: syslog
            - format: none
            # - format: multiline
    integrations:
      events:
        enabled: false
      tekton:
        enabled: false
        txtLogs: false
        path: "logs/${tag}"
      es:
        enabled: false
        config:
          ilm_policy_overwrite: true
          ilm_policy_id: ""
          ilm_policy:
            policy:
              phases:
                hot:
                  min_age: 0ms
                  actions:
                    rollover:
                      max_size: 50gb
                      max_age: 7d
                delete:
                  min_age: 7d
                  actions:
                    delete:
                      delete_searchable_snapshot: true
      minio:
        enabled: false
        config:
          auto_create_bucket: false
          s3_endpoint: http://minio.minio.svc.cluster.local:80
          s3_bucket: kube-core-logs
          s3_region: storage
          credentials:
            id:
              secretName: minio-logging
              secretKey: AWS_ACCESS_KEY_ID
            key:
              secretName: minio-logging
              secretKey: AWS_SECRET_ACCESS_KEY
      s3:
        enabled: false
        config:
          auto_create_bucket: false
          s3_bucket: kube-core-logs
          s3_region: eu-west-1
          credentials:
            id:
              secretName: aws-s3-logging
              secretKey: AWS_ACCESS_KEY_ID
            key:
              secretName: aws-s3-logging
              secretKey: AWS_SECRET_ACCESS_KEY
      gcs:
        enabled: false
        config:
          auto_create_bucket: false
          # project: kube-core
          bucket: kube-core-logs
          credentials:
            secretKeyRef:
              secretName: logging
              secretKey: logging.json
