cloud:
  provider: gcp # aws|gcp
  default:
    location: europe-west1

cluster:
  config:
    name: kube-core
    domain: dev.kube-core.io

# patch:
#   serviceAccountName: my-patch-operator-sa

# resources:

#   rabbitmq-user:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev
#       tags:
#       - policymaker
#       - monitoring
#       - management
#       - administrator

#   rabbitmq-permission:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev

#       # Custom user
#       userName: my-rabbitmq-user-name
#       userRef: my-rabbitmq-user-ref

#       # Permissions defaults to read ".*"
#       read: true
#       write: true
#       configure: true

#       # Custom permissions
#       customPermissions:
#         read: "custom"

#   rabbitmq-vhost:
#     nk-api: {}

#   rabbitmq-cluster:
#     nk-api: {}

#   rabbitmq-policy:
#     nk-api: {}


#   rabbitmq-queue:
#     nk-api: {}

#   rabbitmq-exchange:
#     nk-api: {}

#   rabbitmq-binding:
#     nk-api: {}
#       # type: direct
#       # arguments:
#       #   alternate-exchange: my-alt-exchange




# projectIAMCustomRoles:
#   gcr-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get
#     - cloudbuild.builds.get
#     - cloudbuild.builds.list

#   gcs-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get

# projectIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccountIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccounts:
#   kube-core: {}

# serviceAccountPolicies:
#  app: {}
#   # defaultRoles:
#   # - roles/viewer
#   # - roles/editor
#   # defaultRole: false
#   # role: roles/viewer
#   # sa: custom-sa
#   # roles:
#   # - role: roles/editor
#   #   serviceAccountMemberRefs:
#   #   - custom-sa

# serviceAccountKeys:
#   app: {}

# buckets:
#   app: {}

# bucketPolicies:
#   app: {}
#     # bucketRef: SuperBucket
#     # adminRef: test-admin
#     # public: true
#     # admin: true
#     # roles:
#     # - role: roles/storage.objectViewer
#     #   members:
#     #     - test-member

# backendBuckets:
#   app: {}
#     # bucketName: app-bucket-name
#     # enableCdn: true

# globalAdresses:
#   app: {}
#     # deletionPolicy: ""
#     # addressType: ""
#     # ipVersion: ""

# globalForwardingRules:
#   app: {}
#     # loadBalancingScheme: ""
#     # target:
#     #   type: targetHttpProxies
#     #   name: target-proxy-name
#     # ipAddress: global-adress-name

# targetHttpProxies:
#   app: {}
#     # urlMap: urlMap-name

# targetHttpsProxies:
#   app: {}
#     # urlMap: urlMap-name
#     # managedSslCertificates:
#     # - certificat-1
#     # - certificat-2

# urlMaps:
#   app: {}
#     # hostRule:
#     #   - hosts:
#     #     - app.domain.tld
#     #     pathMatcher: pathmatcher-name
#     # pathMatcher:
#     #   - defaultService: backend-bucket-name
#     #     name: pathmatcher-name

# recordSets:
#   app: {}
#     # managedZone: managed-zone-name
#     # rootDnsName: app.domain.tld.
#     # rrdatas: []
#     # # - 1.1.1.1
#     # # - 2.2.2.2
#     # patch:
#     #   injectIpFromLb: false
#     #   globalAddress: global-address-name

# managedSslCertificates:
#   app: {}
#     # domains: []
#     #   # - app.domain.tld
#     #   # - app2.domain.tld
