{{- if .Values.createPostgresqlSecret -}}
{{- $relname := printf "%s-%s" .Release.Name "postgresql" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{- if .Values.postgresql.existingSecret }} {{ .Values.postgresql.existingSecret }} {{ else }} {{ $relname }} {{- end }}
  labels:
    app: {{ template "sonarqube.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
  {{- if .Release.IsUpgrade }}
  # check to see if secret already exists in namespace.
    {{- if (index (lookup "v1" "Secret" .Release.Namespace $relname ) ) }}
      postgresql-password: {{ index (lookup "v1" "Secret" .Release.Namespace $relname ).data "postgresql-password" }}
    {{- else if (index (lookup "v1" "Secret" .Release.Namespace .Values.postgresql.existingSecret ) ) }}
      postgresql-password: {{ index (lookup "v1" "Secret" .Release.Namespace .Values.postgresql.existingSecret ).data "postgresql-password" }}
    {{ else }}
    # if a secret isn't found when perfroming an upgrade create a new secret.
      {{- if .Values.postgresql.postgresqlPassword }}
        postgresql-password: {{ .Values.postgresql.postgresqlPassword | b64enc | quote }}
      {{- else }}
        {{- $postgresRandomPassword := randAlphaNum 16 | b64enc | quote }}
        postgresql-password: {{ $postgresRandomPassword }}
      {{- end }}
    {{- end }}
  {{ else }}
  # Perform normal install operation
    {{- if .Values.postgresql.postgresqlPassword }}
      postgresql-password: {{ .Values.postgresql.postgresqlPassword | b64enc | quote }}
    {{- else }}
      {{- $postgresRandomPassword := randAlphaNum 16 | b64enc | quote }}
      postgresql-password: {{ $postgresRandomPassword }}
    {{ end }}
  {{ end }}
{{- end }}
