{{ if .Values.cluster.logging.stack.kibana.enabled }}
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: logging
spec:
  version: {{ .Values.cluster.logging.stack.esStackVersion }}
  config:
    # telemetry.optIn: "true"
    # telemetry.allowChangingOptInStatus: "true"
    uiSettings.overrides.theme:darkMode: "true"
    xpack.security.authc.providers:
      basic.basic1:
        order: 0
      anonymous.anonymous1:
        order: 1
        credentials:
          username: "anonymous_service_account"
          password: "anonymous_service_account_password"
  podTemplate:
    spec:
      containers:
      - name: kibana
        volumeMounts:
          - mountPath: /usr/share/kibana/dashboards
            name: kibana-dashboards
            readOnly: true
          - mountPath: /usr/share/kibana/objects
            name: kibana-objects
            readOnly: true
        env:
          - name: ESUSER
            value: elastic
          - name: ESPASSWORD
            valueFrom:
              secretKeyRef:
                name: logging-es-elastic-user
                key: elastic
        {{ if (eq .Values.cluster.logging.dashboards.enabled true) }}
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -c
              - |
                #!/bin/bash
                # Login
                KIBANA_URL=http://localhost:5601
                # Wait until service is ready
                while [[ $(curl -s -o /dev/null -w '%{http_code}\n' "http://localhost:5601/internal/security/login" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' --data-raw '{"providerType":"basic","providerName":"basic1","currentURL":"http://localhost:5601/login?msg=LOGGED_OUT","params":{"username":"'"$ESUSER"'","password":"'"$ESPASSWORD"'"}}' -c cookie.txt) != "200" ]]; do sleep 1; done

                # Work
                # curl -s -X GET "http://localhost:5601/api/index_management/indices" -H 'kbn-xsrf: true' -H 'Content-Type: application/json'  -H "Accept: application/json" -b cookie.txt > indices.json

                # Add default data view for cluster
                dataViewId=$(curl -s -X POST "http://localhost:5601/api/data_views/data_view" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d '{"override": true, "data_view": {"title": "{{ .Values.cluster.config.name }}*", "timeFieldName":"@timestamp"}}' -b cookie.txt | sed 's/.*{"data_view":{"id":"\(.*\)","version.*/\1/')

                 # Add data view for each logging flow
                {{ range .Values.cluster.logging.flows.flows }}
                {{ .name }}DataViewId=$(curl -s -X POST "http://localhost:5601/api/data_views/data_view" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d '{"override": true, "data_view": {"title": "{{ $.Values.cluster.config.name }}.{{ .name }}*", "timeFieldName":"@timestamp"}}' -b cookie.txt | sed 's/.*{"data_view":{"id":"\(.*\)","version.*/\1/')
                {{ end }}

                {{ if .Values.cluster.logging.integrations.events.enabled }}
                curl -s -X POST "http://localhost:5601/api/data_views/data_view" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d '{"override": true, "data_view": {"title": "{{ $.Values.cluster.config.name }}.events*", "timeFieldName":"@timestamp"}}' -b cookie.txt
                # {{ end }}

                {{ if .Values.cluster.logging.integrations.tekton.enabled }}
                curl -s -X POST "http://localhost:5601/api/data_views/data_view" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d '{"override": true, "data_view": {"title": "{{ $.Values.cluster.config.name }}.tekton*", "timeFieldName":"@timestamp"}}' -b cookie.txt
                {{ end }}


                # TODO: Use the following for kibana 8.4 when upgrading
                # curl -s -X POST "http://localhost:5601/api/data_views/data_view" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d '{"override": true, "data_view": {"title": "{{ .Values.cluster.config.name }}*","name": "Default Data View for {{ .Values.cluster.config.name }}", "timeFieldName":"@timestamp"}}' -b cookie.txt

                # Loads dashboards from ConfigMaps, included as ndjson
                dashboards=$(find /usr/share/kibana/dashboards -type f -name '*.ndjson')
                if [[ "$dashboards" != "" ]]; then
                  while read dashboard; do
                    targetFile="/usr/share/kibana/$(basename $dashboard)"
                    dataViewTarget=$(basename $dashboard | awk '{split($0, a, "."); print a[1]}')
                    cat $dashboard | sed "s/DATA_VIEW_ID/$dataViewId/g" > $targetFile
                    {{ range .Values.cluster.logging.flows.flows }}
                    if [[ "${{.name}}DataViewId" != "" && "$dataViewTarget" == "{{.name}}" ]]; then
                      cat $dashboard | sed "s/{{.name | upper}}_DATA_VIEW_ID/${{.name}}DataViewId/g" > $targetFile
                    fi
                    {{ end }}
                    curl -s -X POST "http://localhost:5601/api/saved_objects/_import?overwrite=true" -H 'kbn-xsrf: true' -b cookie.txt --form file=@$targetFile
                  done <<< "$dashboards"
                fi

                # Loads dashboards from ConfigMaps, included as url
                dashboards=$(find /usr/share/kibana/dashboards -type f -name '*.url')
                if [[ "$dashboards" != "" ]]; then
                  while read dashboard; do
                    targetFile="/usr/share/kibana/$(basename $dashboard).ndjson"
                    dataViewTarget=$(basename $dashboard | awk '{split($0, a, "."); print a[1]}')
                    curl -s $dashboard | sed "s/DATA_VIEW_ID/$dataViewId/g" > $targetFile
                    {{ range .Values.cluster.logging.flows.flows }}
                    if [[ "${{.name}}DataViewId" != "" && "$dataViewTarget" == "{{.name}}" ]]; then
                      curl -s $dashboard | sed "s/{{.name | upper}}_DATA_VIEW_ID/${{.name}}DataViewId/g" > $targetFile
                    fi
                    {{ end }}
                    curl -s -X POST "http://localhost:5601/api/saved_objects/_import?overwrite=true" -H 'kbn-xsrf: true' -b cookie.txt --form file=@$targetFile
                  done <<< "$dashboards"
                fi

                {{ if (eq .Values.cluster.logging.dashboards.extraObjects.enabled true) }}
                # Loads objects from ConfigMaps, included as ndjson

                objects=$(find /usr/share/kibana/objects -type f -name '*.ndjson')
                if [[ "$objects" != "" ]]; then
                  while read object; do
                    targetFile="/usr/share/kibana/$(basename $object)"
                    dataViewTarget=$(basename $object | awk '{split($0, a, "."); print a[1]}')
                    cat $object | sed "s/DATA_VIEW_ID/$dataViewId/g" > $targetFile
                    {{ range .Values.cluster.logging.flows.flows }}
                    if [[ "${{.name}}DataViewId" != "" && "$dataViewTarget" == "{{.name}}" ]]; then
                      cat $object | sed "s/{{.name | upper}}_DATA_VIEW_ID/${{.name}}DataViewId/g" > $targetFile
                    fi
                    {{ end }}
                    curl -s -X POST "http://localhost:5601/api/saved_objects/_import?overwrite=true" -H 'kbn-xsrf: true' -b cookie.txt --form file=@$targetFile
                  done <<< "$objects"
                fi

                # Loads dashboards from ConfigMaps, included as url
                objects=$(find /usr/share/kibana/objects -type f -name '*.url')
                if [[ "$objects" != "" ]]; then
                  while read object; do
                    targetFile="/usr/share/kibana/$(basename $object).ndjson"
                    dataViewTarget=$(basename $object | awk '{split($0, a, "."); print a[1]}')
                    curl -s $object | sed "s/DATA_VIEW_ID/$dataViewId/g" > $targetFile
                    {{ range .Values.cluster.logging.flows.flows }}
                    if [[ "${{.name}}DataViewId" != "" && "$dataViewTarget" == "{{.name}}" ]]; then
                      curl -s $object | sed "s/{{.name | upper}}_DATA_VIEW_ID/${{.name}}DataViewId/g" > $targetFile
                    fi
                    {{ end }}
                    curl -s -X POST "http://localhost:5601/api/saved_objects/_import?overwrite=true" -H 'kbn-xsrf: true' -b cookie.txt --form file=@$targetFile
                  done <<< "$objects"
                fi
                {{ end }}
        {{ end }}
        resources:
          requests:
            memory: 256m
            cpu: 0.1
          limits:
            memory: 1Gi
            cpu: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 5601
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
      volumes:
      - name: kibana-dashboards
        configMap:
          defaultMode: 420
          optional: false
          name: {{ .Values.cluster.logging.dashboards.configMap.name }}
      - name: kibana-objects
        configMap:
          defaultMode: 420
          optional: false
          name: {{ .Values.cluster.logging.dashboards.extraObjects.configMap.name }}

  http:
    tls:
      selfSignedCertificate:
        disabled: true
  elasticsearchRef:
    name: logging
  count: 1
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logging-kb-http
spec:
  rules:
  - host: logging-kb-http.logging.{{ .Values.cluster.config.domain }}
    http:
      paths:
      - backend:
          service:
            name: logging-kb-http
            port:
              number: 5601
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - logging-kb-http.logging.{{ .Values.cluster.config.domain }}
    secretName: logging-kb-http-tls
{{ end }}
