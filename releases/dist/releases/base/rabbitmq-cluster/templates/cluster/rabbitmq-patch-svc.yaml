{{ if eq .Values.rabbitmq.cluster.serviceType "LoadBalancer"}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq-patch-svc
secrets: []
imagePullSecrets: []
---
apiVersion: v1
kind: Secret
metadata:
  name: kube-api-secret
  annotations:
    kubernetes.io/service-account.name: rabbitmq-patch-svc
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rabbitmq-patch-svc
subjects:
- kind: ServiceAccount
  name: rabbitmq-patch-svc
  namespace: rabbitmq
- kind: ServiceAccount
  name: rabbitmq-patch-svc
  namespace: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: rabbitmq-patch-svc
spec:
  schedule: "* * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  startingDeadlineSeconds: 300
  jobTemplate:
    spec:
      template:
        spec:
          # nodeSelector:
          #   type: system
          # tolerations:
          #   - key: "type"
          #     operator: "Equal"
          #     value: "system"
          #     effect: "NoSchedule"
          #   - key: "type"
          #     operator: "Equal"
          #     value: "system"
          #     effect: "NoExecute"
          restartPolicy: Never
          serviceAccount: rabbitmq-patch-svc
          containers:
            - name: rabbitmq-patch-svc
              image: neo9sas/devops-tools:latest
              command:
                - /bin/bash
                - -c
                - |
                  # set -x
                  defaultVisitorGroups="{{ .Values.cluster.common.defaultVisitorGroups }}"
                  extraVisitorGroups="{{ .Values.cluster.extraVisitorGroups }}"
                  visitorGroupBased="{{ .Values.rabbitmq.cluster.visitorGroupBasedSourceRanges }}"
                  loadBalancerSourceRanges='{{ .Values.rabbitmq.cluster.loadBalancerSourceRanges | trim }}'
                  
                  if [[ "${visitorGroupBased}" == true ]]
                  then
                      vgList=$(echo -n $defaultVisitorGroups $extraVisitorGroups | sed 's/,/ /g')
                      jsonPatch=$(kubectl get vg $vgList -o json | jq '{"spec": { "loadBalancerSourceRanges" : [.items[].spec.sources[].cidr]} }' -c)
                  else
                      jsonPatch=$(echo $loadBalancerSourceRanges | jq '{"spec": { "loadBalancerSourceRanges" : .} }' -c)
                  fi
                  kubectl patch svc -n rabbitmq rabbitmq --patch ${jsonPatch}
{{ end }}