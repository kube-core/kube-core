apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: garden-run-workflow
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: garden, deploy
    tekton.dev/displayName: "garden deploy"
spec:
  description: >-
    Deploys a garden app
  workspaces:
    - name: input
    - name: output
    - name: source
    - name: data
  volumes:
    - name: kubeconfig
      secret:
        secretName: kubeconfig
    - name: kubeconfig-internal-gcloud
      secret:
        secretName: kubeconfig-internal-gcloud
    - name: kubeconfig-no-gcloud
      secret:
        secretName: kubeconfig-no-gcloud
    - name: tekton
      secret:
        secretName: tekton
    - name: npmrc-reader
      configMap:
        name: npmrc-reader
    - name: npmrc-publisher
      configMap:
        name: npmrc-publisher
  params:
    - name: cluster-name
      description: The cluster name
      type: string
      default: "dev"

    - name: cluster-repository
      description: The repository to clone
      type: string

    - name: cluster-branch
      description: The branch to checkout
      type: string
      default: "develop"

    - name: garden-branch
      description: The branch to checkout
      type: string
      default: "develop"

    - name: garden-user
      description: The branch to checkout
      type: string
      default: "tekton"

    - name: image
      description: The image used by the task
      type: string
      default: neo9sas/devops-tools:v1.5.0
      

    - name: apps-branch
      description: The cluster name
      type: string
      default: "develop"

    - name: garden-env
      description: The PR URL
      type: string
      default: dev

    - name: init-project
      description: The PR URL
      type: string
      default: "false"

    - name: garden-command
      description: The PR URL
      type: string
      default: "run workflow"

    - name: garden-args
      description: The PR URL
      type: string
      default: ""

    - name: sleep
      description: The PR URL
      type: string
      default: "false"

    - name: sleep-time
      description: The PR URL
      type: string
      default: "600"
  results:
  - name: garden-command
    description: The garden command
  steps:
    - name: garden-version
      image: $(params.image)
      script: |
        #!/usr/bin/env bash
        echo "Init - Checking stuff"

        echo "Checking garden.io version ..."
        garden_version=$(garden version)
        echo "Using garden ${garden_version}"

    - name: garden
      image: $(params.image)
      imagePullPolicy: Always
      command: ["/bin/bash"]
      volumeMounts:
        - name: kubeconfig
          mountPath: /tmp/kubeconfig
        - name: kubeconfig-internal-gcloud
          mountPath: /tmp/kubeconfig-internal-gcloud
        - name: kubeconfig-no-gcloud
          mountPath: /tmp/kubeconfig-no-gcloud
        - name: tekton
          mountPath: /tmp/tekton
        - name: npmrc-reader
          mountPath: /tmp/npmrc-reader
        - name: npmrc-publisher
          mountPath: /tmp/npmrc-publisher
      # TODO : Try using this instead of copying file in task
      # env:
      #   NPM_CONFIG_USERCONFIG: /tmp/npmrc-reader/npmrc-reader
      #   OR
      #   NODE_AUTH_TOKEN: token?
      # TODO: refacto devops-tools & use this instead
      env:
        # - name: GARDEN_LOG_LEVEL
        #   value: debug
        - name: GARDEN_LOGGER_TYPE
          value: basic
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /tmp/tekton/tekton.json
        - name: KUBECONFIG
          value: /tmp/kubeconfig-internal-gcloud/kubeconfig-internal-gcloud.yaml
      args:
        - -c
        - |
          #!/usr/bin/env bash

          # Copy SSH keys injected by Tekton
          cp -rfp ~/.ssh /root

          # Variables
          rootPath=$(workspaces.source.path)/$(params.cluster-name)
          clusterPath=${rootPath}/cluster
          gardenPath=${rootPath}/garden
          terraformPath=${rootPath}/terraform
          gardenCommand="$(params.garden-command)"
          gardenEnv="$(params.garden-env)"
          
          # TODO: See if we really need to be root
          userHome=/root 

          # Setup required/optional env vars
          export user=$(params.garden-user)
          gardenUser=$(params.garden-user)
          apps_branch=$(params.apps-branch)

          # Slugify branch to DNS
          export branch=$( echo "$apps_branch" | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)

          if [[ "$(params.sleep)" == "true" ]]
          then
            sleep $(params.sleep-time)
          fi

          cd ${gardenPath}

          echo "Deploy command : garden ${gardenCommand} $(params.garden-args) --env=${gardenEnv} --yes"

          # garden ${gardenCommand} $(params.garden-args) --env=${gardenEnv} --yes > $(workspaces.output.path)/garden-logs 2> $(workspaces.output.path)/garden-errors

          (garden ${gardenCommand} $(params.garden-args) --env=${gardenEnv} --yes | tee $(workspaces.output.path)/garden-logs) 3>&1 1>&2 2>&3 | tee $(workspaces.output.path)/garden-errors
          
          cat error.log >> $(workspaces.output.path)/garden-errors
          cat error.log > $(workspaces.output.path)/garden-run-workflow-errors
