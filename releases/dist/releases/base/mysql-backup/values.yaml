mySqlBackup:
  # (Required) Cronjob schedule
  schedule: "0 07 * * *"
  # (Optional - default false) Adds the CREATE DATABASE and USE statements to the MySQL backup by explicitly specifying the --databases flag (see here).
  backupCreateDatabaseStatement: false
  # (Optional) Additional parameters to add to the mysqldump command.
  backupAdditionalParams: ""
  # (Optional) Date string to append to the backup filename (date format). Leave unset if using S3 Versioning and date stamp is not required.
  backupTimestamp: "_%Y_%m_%d_%H_%M"
  # (Optional) (true/false) Enable or disable gzip backup compression - (Default False).
  backupCompress: false
  # (Optional - default 9) Set the gzip level used for compression.
  backupCompressLevel: "9"
  # (Optional) Public key used to encrypt backup with FiloSottile/age. Leave blank to disable backup encryption.
  agePublicKey: ""
  # (Required) Hostname or IP address of the MySQL Host.
  targetDatabaseHost: "localhost"
  # (Optional) Port MySQL is listening on (Default: 3306).
  targetDatabasePort: "3306"
  # (Optional - default false) Set to true to ignore TARGET_DATABASE_NAMES and dump all non-system databases.
  targetAllDatabases: false
  # (Required unless TARGET_ALL_DATABASES is true) Name of the databases to dump. This should be comma seperated (e.g. database1,database2).
  targetDatabaseNames: ""
  # (Required) Username to authenticate to the database with.
  targetDatabaseUser: ""
  # (Required) Password to authenticate to the database with. Should be configured using a Secret in Kubernetes.
  targetDatabasePassword:
    existingSecret: ""
    secretKey: ""
  # (Optional) The backend to use for storing the MySQL backups. Supported options are gcp (default) or aws
  backupProvider: gcp
  # (Required for GCP Backend) Base64 encoded service account key exported as JSON. Secret content itself need to be b64enc. Example of how to generate: base64 ~/service-key.json
  gcpGcloudAuth:
    existingSecret: ""
    secretKey: ""
  # (Required for GCP Backend) The name of GCP GCS bucket.
  gcpBucketName: ""
  # (Required for GCP Backend) Path the backup file should be saved to in GCS. E.g. /database/myblog/backups. Do not put a trailing / or specify the filename.
  gcpBucketBackupPath: ""
  # (Required for AWS Backend) AWS IAM Access Key ID.
  awsAccessKeyId: ""
  # (Required for AWS Backend) AWS IAM Secret Access Key. Should have very limited IAM permissions (see below for example) and should be configured using a Secret in Kubernetes.
  awsSecretAccessKey:
    existingSecret: ""
    secretKey: ""
  # (Required for AWS Backend) Region of the S3 Bucket (e.g. eu-west-2).
  awsDefaultRegion: ""
  # (Required for AWS Backend) The name of the S3 bucket.
  awsBucketName: ""
  # (Required for AWS Backend) Path the backup file should be saved to in S3. E.g. /database/myblog/backups. Do not put a trailing / or specify the filename.
  awsBucketBackupPath: ""
  # (Optional) The S3-compatible storage endpoint (for MinIO/other cloud storage) bucket.
  awsS3Endpoint: ""
  # (Optional) (true/false) Enable or disable the Slack Integration (Default False).
  slackEnabled: false
  # (Optional) (true/false) Username to use for the Slack Integration (Default: kubernetes-cloud-mysql-backup).
  slackUsername: false
  # (Required if Slack enabled) Slack Channel the WebHook is configured for.
  slackChannel: ""
  # (Required if Slack enabled) What is the Slack WebHook URL to post to? Should be configured using a Secret in Kubernetes.
  slackWebhookUrl:
    existingSecret: ""
    secretKey: ""
