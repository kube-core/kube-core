releases:
  cert-manager:
    config:
      cainjector:
        enabled: true
        replicaCount: 1
      replicaCount: 1
      webhook:
        hostNetwork: false
        replicaCount: 1
        securePort: 10250
  chaos:
    config:
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$1
        labels: {}
        subdomain: chaos
  chartmuseum:
    config:
      env:
        open:
          ALLOW_OVERWRITE: true
          AUTH_ANONYMOUS_GET: true
          DISABLE_API: false
          DISABLE_METRICS: false
          DISABLE_STATEFILES: true
      ingress:
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/server-snippet: |
            location ~ ^/(metrics) {
              deny all;
              return 403;
            }
        labels:
          ingress.neo9.io/access-operator-enabled: "false"
        subdomain: charts
      persistence:
        enabled: true
  container-registry-cleaner:
    config:
      concurrencyPolicy: Forbid
      restartPolicy: OnFailure
      schedule: 0 9 * * *
      secretName: gcr-admin
  crossplane:
    config:
      providers:
        aws:
          credentials:
            secretRef:
              key: crossplane-aws-service-account.json
              name: crossplane-aws-service-account
            source: Secret
          enabled: false
        gcp:
          credentials:
            secretRef:
              key: crossplane-gcp-service-account.json
              name: crossplane-gcp-service-account
            source: Secret
          enabled: false
          projectID:
  efk:
    config:
      elasticsearch:
        bucket_name: bucket_name
        gcs: false
        ingress:
          annotations: {}
          enabled: true
          labels: {}
          subdomain: elasticsearch.efk
        s3: false
      esJavaOpts: -Xmx2g -Xms2g
      ilmPolicy: |
        {"policy":{"phases":{"hot":{"min_age":"0ms","actions":{"rollover":{"max_age":"5m","max_size":"10mb","max_docs":100},"set_priority":{"priority":100}}},"warm":{"actions":{"set_priority":{"priority":50}}},"cold":{"min_age":"5m","actions":{"freeze":{},"set_priority":{"priority":0}}},"delete":{"min_age":"10m","actions":{"delete":{"delete_searchable_snapshot":true}}}}}}
      image: docker.elastic.co/elasticsearch/elasticsearch
      kibana:
        ingress:
          annotations: {}
          enabled: true
          labels: {}
          subdomain: kibana.efk
      queryDefaultField: json.message
      resources:
        limits:
          cpu: 1000m
          memory: 3Gi
        requests:
          cpu: 200m
          memory: 1Gi
      values: {}
      watchedNamespaces:
        - kube-system
  estafette-gke-node-pool-shifter:
    config:
      interval: 300
      nodePoolFrom: safety
      nodePoolFromMinNode: 0
      nodePoolTo: main
      secretName: estafette-gke-node-pool-shifter
  estafette-gke-preemptible-killer:
    config:
      drainTimeout: 300
      interval: 300
  estafette-k8s-node-compactor:
    config:
      configmap:
        compactorConfig: |
          {"nodePools":{"main":{"enabled":true,"scaleDownCPURequestRatioLimit":0.75,"scaleDownRequiredUnderutilizedNodeCount":5},"safety":{"enabled":true,"scaleDownCPURequestRatioLimit":0.6,"scaleDownRequiredUnderutilizedNodeCount":3}}}
      minimumNodeAgeSeconds: 60
      neededMarkedTimeForRemovalSeconds: 60
      sleepDurationBetweenIterationsSeconds: 60
  external-dns:
    config:
      replicaCount: 1
  forecastle:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: forecastle
      namespaceSelector:
        any: true
  ingress-access-operator:
    config:
      defaultFiltering:
        enabled: false
      dynamicIstioSidecar:
        enabled: false
      exposer:
        enabled: true
      logLevel: INFO
  istio-rules-external-services:
    config:
      externalServices:
        - host: analytics.strapi.io
          name: strapi-analytics
        - host: google.com
          name: google
  keycloak:
    config:
      ha: true
      ingress:
        annotations:
          nginx.org/redirect-to-https: "True"
          nginx.org/server-snippets: |
            location / {
              proxy_set_header X-Forwarded-For $host;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
        labels: {}
        subdomain: keycloak
      keycloak: {}
      postgresql: {}
  keycloak-dev:
    config:
      ha: false
      ingress:
        annotations:
          nginx.org/redirect-to-https: "True"
          nginx.org/server-snippets: |
            location / {
              proxy_set_header X-Forwarded-For $host;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
        labels: {}
        subdomain: keycloak.dev
      keycloak: {}
      postgresql: {}
  kps:
    config:
      alertmanager:
        additionalReceivers: []
        additionalRoutes: []
        ingress:
          annotations: {}
          labels: {}
          subdomain: alertmanager
      grafana:
        accessibility:
          anonRole: Editor
          anonymous: true
        dashboardProviders: {}
        dashboards: {}
        datasources:
          prometheus: false
          thanos: true
        ingress:
          annotations: {}
          labels: {}
          subdomain: grafana
        plugins: []
      kpsminio:
        persistence:
          accessMode: ReadWriteOnce
          enabled: true
          size: 100Gi
      opsgenie:
        alerts:
          apiKey: {}
          enabled: true
        enabled: false
        heartbeat:
          apiKey: {}
          enabled: true
          endpoint: {}
      prometheus:
        ingress:
          annotations: {}
          labels: {}
          subdomain: prometheus
        replicaCount: 3
        serviceMonitors: []
      robusta:
        additionalSinks: []
        enabled: false
        mainSlack:
          apiKey: {}
          channel: {}
      thanos:
        compactor:
          retentionResolution1h: 1y
          retentionResolution5m: 90d
          retentionResolutionRaw: 20d
        externalObjectStorageBackend:
          enabled: false
          objstoreSecret: ""
          objstoreSecretKey: ""
  kubernetes-dashboard:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: kubernetes-dashboard
      replicaCount: 1
  nexus:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: nexus
      initAdminPassword: {}
  nginx:
    config:
      branch: master
      replicaCount: 1
      repository: https://github.com/cloudacademy/static-website-example
  nginx-ingress-controller:
    config:
      affinity: {}
      autoscaling: {}
      clusterIP: ""
      dnsPolicy: ClusterFirst
      externalTrafficPolicy: Local
      ha: false
      hostNetwork: false
      ingressClass: nginx
      istioAnnotations: false
      kind: Deployment
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      minAvailable: 1
      nodeSelector: {}
      publishServiceEnabled: true
      replicaCount: 2
      serviceType: LoadBalancer
      tolerations: []
  nginx-istio-ingress-controller:
    config:
      affinity: {}
      autoscaling: {}
      clusterIP: ""
      dnsPolicy: ClusterFirst
      externalTrafficPolicy: Local
      hostNetwork: false
      ingressClass: nginx-istio
      istioAnnotations: true
      kind: Deployment
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      minAvailable: 2
      nodeSelector: {}
      publishServiceEnabled: true
      replicaCount: 2
      serviceType: LoadBalancer
      sidecarHosts:
        - istio-system/*
      tolerations: []
  polaris:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: polaris
  predator:
    config:
      allowInsecureTls: true
      customRunnerDefinition: ""
      delayRunnerMs: 0
      ingress:
        annotations: {}
        labels: {}
        subdomain: predator
      intervalCleanupFinishedContainers: 0
      runnerCpu: 1
      runnerDockerImage: zooz/predator-runner:1.6
      runnerMemory: 256
      skipInternalAddressCheck: true
  reloader:
    config:
      ignoreConfigMaps: false
      ignoreNamespaces: ""
      ignoreSecrets: false
      logFormat: ""
      watchGlobally: true
  sloop:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: sloop
  sonarqube:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: sonarqube
      initAdminPassword: {}
      plugins:
        install:
          - https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/1.6.0/sonarqube-community-branch-plugin-1.6.0.jar
        lib:
          - sonarqube-community-branch-plugin-1.6.0.jar
  starboard-operator:
    config:
      targetNamespaces: apps
  system-jobs:
    config:
      taints:
        - selector:
            key: type
            value: system
          taint:
            effect: NoExecute
            key: type
            value: system
        - selector:
            key: type
            value: system
          taint:
            effect: NoSchedule
            key: type
            value: system
  zeebe-operate:
    config:
      ingress:
        annotations: {}
        labels: {}
        subdomain: zebee-operate
