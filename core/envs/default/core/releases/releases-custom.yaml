releasesCustom:
  containerRegistry:
    config:
      global: {}
      registries:
        - enabled: false
          labels:
            environnement: sandbox
            registry: kube-core
          name: kube-core
          namespace: container-registry-operator
          needs: []
          spec: {}
          values:
            spec:
              # secretRef : secretname
              gcrAccessData: >-
                {"auth":"password"}
              hostname: 'eu.gcr.io'
              imageRegistry: 'gcr'
              namespaces: []
              project: 'kube-core'
              secretName: kube-core-custom-secret-name
    enabled: false
  containerRegistryCleanup:
    config:
      cleanupJobs:
        - enabled: false
          name: sandbox
          namespace: container-registry-operator
          needs: []
          spec: {}
          values:
            spec:
              args: ["--help"]
              schedule: "0/5 * * * *"
              selector:
                registrySelector:
                  environnement: sandbox
      global: {}
    enabled: false
  keycloakManaged:
    config:
      keycloak:
        - enabled: false
          name: example
          namespace: keycloak
          needs: []
          spec: {}
          values:
            adminAuth:
              existingSecretName: keycloak-auth
              pullSecret: true
            externalDatabase:
              enabled: true
              pgsqlClusterName: kube-core-keycloak-postgresql
              postgresDatabase: keycloak
              postgresUsername: postgres
            ingress:
              annotations: {}
              clusterWideAnnotations: true
              clusterWideLabels: false
              enabled: false
              hosts:
                - host: domain.tld
                  paths:
                    - path: /
                      pathType: ImplementationSpecific
              labels: {}
              tls:
                - hosts:
                    - domain.tld
                  secretName: domain-tls
            keycloak:
              extensions:
                - https://github.com/aerogear/keycloak-metrics-spi/releases/download/1.0.4/keycloak-metrics-spi-1.0.4.jar
              externalAccess:
                enabled: false
              externalDatabase:
                enabled: true
              instances: 1
              podDisruptionBudget:
                enabled: true
            operator:
              keycloakImage: "quay.io/keycloak/keycloak:15.0.2"
            realms: []
            service: {}
            # - name: realm-test
            #   userGroups:
            #     - group1
            #     - group2
            #   realm:
            #     id: "test-env"
            #     realm: "test"
            #     enabled: True
            #     displayName: "test"
            #   clients:
            #     - name: super-test
            #       client:
            #         clientId: client-script
            #         secret: client-secret
            # - name: realm-dev
            #   userGroups:
            #     - group1
            #   realm:
            #     id: "test-dev"
            #     realm: "dev"
            #     enabled: True
            #     displayName: "dev"
            #   clients: {}
            userGroups: []
            # - name: group1
            #   users:
            #     - name: userx
            #       user:
            #         username: "adoe"
            #         firstName: "Alice"
            #         lastName: "Doe"
            #         email: "alice.doe@example.com"
            #         enabled: True
            #         emailVerified: False
            #         realmRoles:
            #           - "offline_access"
            #         clientRoles:
            #           account:
            #             - "manage-account"
            #           realm-management:
            #             - "manage-users"
            #     - name: usery
            #       user:
            #         username: "jdoe"
            #         firstName: "John"
            #         lastName: "Doe"
            #         email: "john.doe@example.com"
            #         enabled: True
            #         emailVerified: False
            #         realmRoles:
            #           - "offline_access"
            #         clientRoles:
            #           account:
            #             - "manage-account"
            #           realm-management:
            #             - "manage-users"
            # - name: group2
            #   users:
            #     - name: userw
            #       user:
            #         username: "bdoe"
            #         firstName: "Bob"
            #         lastName: "Doe"
            #         email: "bob.doe@example.com"
            #         enabled: True
            #         emailVerified: False
            #         realmRoles:
            #           - "offline_access"
            #         clientRoles:
            #           account:
            #             - "manage-account"
            #           realm-management:
            #             - "manage-users"
    enabled: false
  mongodb:
    config:
      clusters:
        - annotations:
            ab: cd
          config:
            agent:
              resources:
                limits:
                  cpu: "0.2"
                  memory: 250M
                requests:
                  cpu: "0.2"
                  memory: 200M
            members: 3
            mongod:
              resources:
                limits:
                  cpu: "0.2"
                  memory: 250M
                requests:
                  cpu: "0.2"
                  memory: 200M
            users:
              - db: admin
                name: my-user
                # a reference to the secret that will be used to generate the user's password
                passwordSecretRef:
                  name: my-user-password
                roles:
                  - db: admin
                    name: clusterAdmin
                  - db: admin
                    name: userAdminAnyDatabase
                scramCredentialsSecretName: my-scram
            version: "4.2.6"
          labels: {}
          name: mongodb
          namespace: dev
          needs: []
    enabled: false
  mysqlBackup:
    config:
      clusters:
        - enabled: false
          name: mysql-backup
          namespace: app
          needs: []
          pullGcpSecret: true
          shareGlobalConfig: true
          spec: {}
          values:
            gcpBucketBackupPath: "/app"
            targetDatabaseHost: app-svc-mariadb
            targetDatabaseNames: "dbname"
            targetDatabasePassword:
              existingSecret: "app-mariadb"
              secretKey: "mariadb-password"
            targetDatabaseUser: "dbuser"
      global:
        backupCompress: false
        backupProvider: gcp
        backupTimestamp: "_%Y_%m_%d_%H_%M"
        gcpBucketName: "cluster-mysql-backup"
        gcpGcloudAuth:
          existingSecret: "mysql-backup-sa64"
          secretKey: "mysql-backup-sa64"
        schedule: "0 5 * * *"
        targetAllDatabases: false
        targetDatabasePort: "3306"
    enabled: false
  oauth2Proxy:
    config:
      global:
        # config:
        #   existingSecret: oauth-clientid
        #   cookieName: "Auth"
        # extraArgs:
        #   cookie-refresh: 10
        #   email-domain: "domain.com,domain.org"
        ingress:
          annotations:
            kubernetes.io/ingress.class: nginx
          path: /oauth2
          pathType: Prefix
      proxies:
        - enabled: false
          name: app-proxy
          namespace: app
          needs: []
          pullExistingSecret: true
          shareGlobalConfig: true
          spec: {}
          values:
            ingress:
              enabled: true
              hosts:
                - app.domain.tld
              tls:
                - hosts:
                    - app.domain.tld
                  secretName: app-tld-tls
    enabled: false
  postgresOperator:
    config:
      pod_env_overrides:
        data:
          CLONE_USE_WALG_RESTORE: "true"
          USE_WALG_BACKUP: "true"
          USE_WALG_RESTORE: "true"
        enabled: false
    enabled: false
    values: {}
    # configAwsOrGcp:
    #   additional_secret_mount: "postgres-backup-creds"
    #   additional_secret_mount_path: "/var/secrets/google"
    #   gcp_credentials: "/var/secrets/google/key.json"
    #   wal_gs_bucket: ""
  ### Postgres-operator heavily depend on ressources naming format {TEAM}-{NAME} to deploy new cluster
  postgresOperatorCluster:
    config:
      clusters:
        - annotations: {}
          config:
            replicateSecret_additional_secret_mount: true
          enabled: false
          labels: {}
          name: TeamID-cluster
          namespace: default
          needs:
            - postgres-operator/postgres-operator
          spec:
            numberOfInstances: 1
            postgresql:
              version: "13"
            teamId: "TeamID"
            volume:
              size: 1Gi
    enabled: false
  rabbitmq:
    config:
      clusters:
        - name: rabbitmq
          namespace: dev
          needs: ["namespace-dev"]
          spec:
            replicas: 1
            resources:
              limits:
                memory: 500Mi
              requests:
                cpu: 30m
                memory: 500Mi
        - name: rabbitmq
          namespace: rabbitmq
          needs: ["namespace-rabbitmq"]
          spec:
            replicas: 1
            resources:
              limits:
                memory: 500Mi
              requests:
                cpu: 30m
                memory: 500Mi
    enabled: false
  tektonCronjob:
    config:
      cronjobs:
        - enabled: false
          name: tekton-cronjob-for-app-push-develop
          namespace: tekton-pipelines
          needs: []
          spec: {}
          values:
            chartName: "neo9charts/n9-api"
            chartVersion: "0.10.0"
            containerImagesRepository: ""
            gitApiEndpoint: https://gitlab.com/api/v4
            gitBranch: develop
            gitProjectName: integration-tests
            gitUrl: ""
            nodeTestsImage: "ihebchakroun/node-14.15.4-chrome-lighthouse:latest"
            nodeVersion: "14.15.4"
            pipelineName: app-push-develop
            projectId: "1214"
            runTests: "true"
            schedule: "* * * * *"
            sonarUrl: ""
            tektonUrl: ""
      global: {}
    enabled: false
