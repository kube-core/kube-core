{{ $values := .values }}
{{ $devMode := (or (env "KUBE_CORE_DEV") ($values | getOrNil "devMode")) }}
{{ $releaseName := .releaseName }}

{{ $releasesDistChartsPath := "../releases/dist/releases/charts" }}
{{ $releasesLocalChartsPath := "../releases/local" }}

{{ $isRelease := (eq .item.type "release") }}
{{ $isApplication := (eq .item.type "application") }}
{{ $isService := (eq .item.type "service") }}
{{ $isCluster := (eq .item.type "cluster") }}

{{ $chartPath := (coalesce .item.chart (printf "kube-core/%s" $releaseName)) }}
{{ $chartName := ((splitList "/" $chartPath) | last) }}
{{ $chartRepo := ((splitList "/" $chartPath) | first) }}
{{ $chartExistsInDist := (isFile (printf "%s/%s/Chart.yaml" $releasesDistChartsPath $chartName)) }}
{{ $chartExistsInLocal := (isFile (printf "%s/%s/Chart.yaml" $releasesLocalChartsPath $chartName)) }}
{{ $isCoreReleaseWithoutCoreChart := (and $isRelease (not $chartExistsInDist) (not $chartExistsInLocal)) }}
{{ $chartIsAppChart := (eq $chartName "n9-api") }}

{{ if (and $isCoreReleaseWithoutCoreChart false) }}
{{/*TODO: Re-implement it higher in state*/}}
{{ $chartPath = "kube-core/raw"}}
{{ $chartName = "raw" }}
{{ $chartRepo = "kube-core" }}
{{ $_ := set .item "chart" "kube-core/raw" }}
{{ end }}

{{ $valuesTemplateExistForChart := (isFile (printf "./values/%s.yaml.gotmpl" $chartName)) }}


{{ $chartRepoIsCore := (eq $chartRepo "kube-core") }}
{{ $disableCoreValuesChart := (.item | getOrNil "disableCoreValuesChart") }}
{{ $disableCoreValuesLayer := (.item | getOrNil "disableCoreValuesLayer") }}


{{- if (and $chartRepoIsCore (not $disableCoreValuesChart)) }}
{{ if (and $devMode $chartExistsInLocal) }}
{{ $chartPath = (printf "%s/%s" $releasesLocalChartsPath $chartName) }}
{{ else }}
{{ $chartPath = (printf "%s/%s" $releasesDistChartsPath $chartName) }}
{{ end }}
{{ end }}


{{ $valuesName := $releaseName }}
{{ $renderValues := false }}

{{ if $isRelease }}
{{ $renderValues = true }}
{{- else if (and (or $isApplication) $chartExistsInDist $chartRepoIsCore $chartIsAppChart) }}
{{ $valuesName = "n9-api" }}
{{ $renderValues = true }}
{{- else if (and (or $isService $isCluster) $valuesTemplateExistForChart $chartRepoIsCore (not $disableCoreValuesLayer)) }}
{{ $valuesName = $chartName }}
{{ $renderValues = true }}
{{- end }}

{{ $valuesPath := (printf "./values/%s.yaml.gotmpl" $valuesName) }}

- name: {{ .releaseName }}
  namespace: {{ .releaseNamespace }}
  chart: {{ $chartPath }}
  version: {{ .item.chartVersion }}
  installed: {{ .item.enabled }}
  kubeContext: {{ coalesce .releaseContext $values.cluster.config.context }}
  labels:
  {{ if .item.labels }}
    {{ toYaml .item.labels | nindent 4 }}
  {{ end }}
    app: {{ .releaseName }}
    context: {{ coalesce .item.context (getOrNil "releaseContext" .) $values.cluster.config.context }}
  values:
  {{/*Inject core values if enabed. Placed here so that core values can be overriden by a release if needed. */}}
  {{/*Be careful about values naming conflicts when activated. */}}
  {{- if .item.injectCoreValues -}}
  - {{ toYaml $values | nindent 4 | trim }}
  {{- end }}
  {{ if $renderValues }}
  - {{ $valuesPath }}
  {{ end }}
  {{- if .item.extraReleaseValues }} {{/*# Adding extra values (not in .item.release because of toYaml above)*/}}
  {{- range .item.extraReleaseValues }}
  - "{{ . }}"
  {{- end }}
  {{- end }}
  {{- if .item.templatedValues }} {{/*# Allows overriding / accessing values from the original chart !*/}}
  - {{ (tpl (.item.templatedValues) $values) | nindent 4 | trim }}
  {{- end }}
  {{- if .item.values }} {{/*# Allows overriding / accessing values from the original chart !*/}}
  - {{ toYaml .item.values | nindent 4 | trim }}
  {{- end }}
