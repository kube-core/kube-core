{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


{{ $bucketName := "chartmuseum" }}
{{ if $release.metadata.config.cloudEnabled }}
{{ $bucketName = $release.metadata.namingConfig.templated.releaseBucketName }}
{{ else }}
{{ $bucketName = ($values | get "cluster.config.storage.bucketName" (printf "%s-chartmuseum" $values.cluster.config.name)) }}
{{ end }}

replicaCount: 1

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

ingress:
  enabled: true
  ingressClassName: {{ $values.cluster.common.defaultIngressClass }}
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* "^/metrics" {
        deny all;
        return 403;
      }
    {{ if .Values.cluster.common.defaultIngressAnnotations }}
      {{ toYaml .Values.cluster.common.defaultIngressAnnotations | nindent 4 }}
    {{- end }}
    {{- if (index $release "config" "ingress" "annotations") }}
      {{ toYaml (index $release "config" "ingress" "annotations") | nindent 4 }}
    {{- end }}
  labels:
    {{ if .Values.cluster.common.defaultIngressLabels }}
      {{ toYaml .Values.cluster.common.defaultIngressLabels | nindent 4 }}
    {{- end }}
    {{- if (index $release "config" "ingress" "labels") }}
      {{ toYaml (index $release "config" "ingress" "labels") | nindent 4 }}
    {{- end }}
  hosts:
    - name: {{ (index $release "config" "ingress" "subdomain") }}.{{ .Values.cluster.config.domain }}
      path: /
      tls: true
      tlsSecret: {{ (index $release "config" "ingress" "subdomain") | replace "." "-"}}-tls

serviceMonitor:
  enabled: false
{{/* As the chart use .Capabilities.APIVersions.Has which have issue, we create the serviceMonitor separately
  enabled: {{ or (index $release "config" "metrics" "serviceMonitor" "enabled") $values.core.packages.monitoring.enabled ($values.releases.kps.enabled) }}
*/}}

# https://chartmuseum.com/docs/#all-cli-options
env:
  open:
    ENABLE_METRICS: {{ or (index $release "config" "metrics" "enabled") ($values.releases.kps.enabled) }}
    CACHE_INTERVAL: {{ index $release "config" "museum" "cacheInterval" }}
    ALLOW_OVERWRITE: {{ index $release "config" "museum" "allowOverwrite" }}
    AUTH_ANONYMOUS_GET: {{ index $release "config" "museum" "authAnonymousGet" }}
    DISABLE_STATEFILES: {{ index $release "config" "museum" "disableStatefiles" }}
    DISABLE_API: {{ index $release "config" "museum" "disableApi" }}
    BASIC_AUTH_USER: {{ index $release "config" "museum" "adminUser" }}
  {{ if eq (index $release "config" "storage" "cloudOrLocal") "local" }}
    STORAGE: local
  {{ else if eq (index $release "config" "storage" "cloudOrLocal") "cloud" }}
    {{ if eq $values.cloud.provider "gcp" }}
    STORAGE: google
    STORAGE_GOOGLE_BUCKET: {{ $bucketName }}
    STORAGE_GOOGLE_PREFIX: {{ index $release "config" "storage" "bucketPrefix" }}
    {{ end }}
  {{ end }}
  existingSecret: chartmuseum-dynamic-secrets-basic-admin-password
  existingSecretMappings:
    BASIC_AUTH_PASS: BASIC_AUTH_PASS

{{ if eq (index $release "config" "storage" "cloudOrLocal") "cloud" }}
{{ if eq $values.cloud.provider "gcp" }}
gcp:
  secret:
    enabled: true
    key: privateKey
    name: chartmuseum
{{ end }}
{{ end }}

persistence:
  # Default operation mode should be with bucket/object storage, persistence only usefull for test with local storage
  {{ if eq (index $release "config" "storage" "cloudOrLocal") "local" }}
  enabled: true
  {{ else }}
  enabled: false
  {{ end }}
