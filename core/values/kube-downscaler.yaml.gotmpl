{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}

## How many kube-downscaler pods should run in deployment
replicaCount: 1

## Namespace where kube-downscaler is going to be deployed.

debug:
  enable: true
# namespace:
  ## Deployment will query all namespaces if left empty:
#  active_in:
## How frequently kube-downscaler should query applications uptime, unit is in seconds.

## Default is 60 seconds
interval: 60

rbac:
  ## If true, create & use RBAC resources
  create: true
  ## Ignored if rbac.create is true
  serviceAccountName: default

image:
  repository: hjacobs/kube-downscaler
  tag: 21.2.0
  pullPolicy: IfNotPresent
  args:
    - --include-resources=deployments,statefulsets
    - --exclude-namespaces={{ $values.cluster.config.downscalerExcludedNamespaces }}
    # - --exclude-namespaces=kube-system,system-tools,namespace-node-affinity
    # - --once
    # - --dry-run
    # --default-uptime="Mon-Sun 07:30-20:30 Europe/Berlin"

resources:
  limits:
    cpu: 50m
    memory: 200Mi
  requests:
    cpu: 50m
    memory: 200Mi

securityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

extraLabels: {}

deployment:
  environment:
    DEFAULT_UPTIME: {{ $values.cluster.config.schedule }}

# This will periodically remove all annotations preventing downscaling
# Sometimes people forget to remove the annotations and this can incur costs
resetAnnotationsCronjob:
  enabled: false
  image: bitnami/kubectl:latest
  # Cron schedule for when to reset the annotations
  schedule: 0 7 * * *
  # A kubectl selector to identify what deployments to remove the annotation from
  labelSelectors:
    - environment=staging
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 50Mi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
nodeSelector: {{ toYaml (index $release "scheduling" "nodeSelector") | nindent 2 }}
tolerations: {{ toYaml (index $release "scheduling"  "tolerations") | nindent 2 }}
affinity: {{ toYaml (index $release "scheduling" "affinity") | nindent 2 }}
