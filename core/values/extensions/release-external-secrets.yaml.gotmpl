{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


{{ $releaseSqlRef := ($release | getOrNil "sql" | getOrNil "ref") }}
{{ $releaseSqlEnabled := ($release | getOrNil "sql" | getOrNil "enabled") }}
{{ $releaseExternalSecretsSqlEnabled := ($release | getOrNil "external-secrets" | getOrNil "sql" | getOrNil "enabled") }}

{{ $releaseMongodbRef := ($release | getOrNil "mongodb" | getOrNil "ref") }}
{{ $releaseMongodbEnabled := ($release | getOrNil "mongodb" | getOrNil "enabled") }}
{{ $releaseExternalSecretsMongodbEnabled := ($release | getOrNil "external-secrets" | getOrNil "mongodb" | getOrNil "enabled") }}

manifests:
{{ if ($release | getOrNil "external-secrets" | getOrNil "generated" | getOrNil "enabled") }}
{{ range $secretName, $value := (index $release "external-secrets" "generated" "secrets") }}
{{ $secretEnabled := ($value | getOrNil "enabled") }}
{{ $crossplaneGenerated := ($value | getOrNil "crossplaneGenerated") }}
{{ $cloudEnabled := ($release.metadata.config.cloudEnabled) }}
{{ if (not $cloudEnabled) }}
{{ $secretEnabled = false }}
{{ end }}
{{ if $secretEnabled }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
    {{ if ($value | getOrNil "forceSecretName") }}
      name: {{ $secretName }}
    {{ else if ($value | getOrNil "forceReleaseName") }}
      name: {{ $releaseName }}
    {{ else }}
      name: {{ $releaseName }}-generated-{{ $secretName }}
    {{ end }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        {{ if ($value | getOrNil "secretStoreRef") }}
        name: {{ $value.secretStoreRef }}
        {{ else if $crossplaneGenerated }}
        name: k8s-crossplane-system
        {{ else }}
        name: k8s-{{ $releaseNamespace }}
        {{ end }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          metadata:
            annotations:
              replicator.v1.mittwald.de/replication-allowed: "true"
              replicator.v1.mittwald.de/replication-allowed-namespaces: {{ $releaseNamespace }}
        {{ if ($value | getOrNil "template") }}
          data: {{ toYaml ($value | getOrNil "template") | nindent 12 }}
        {{ else if ($value | getOrNil "templatedTemplate") }}
          data: {{ tpl ($value.templatedTemplate) $templateValues | nindent 12 }}
        {{ end }}
      {{ if ($value | getOrNil "data") }}
      data: {{ toYaml $value.data | nindent 8 }}
      {{ else if $value | getOrNil "templatedData" }}
      {{ $templatedData := (tpl ( $value.templatedData) $templateValues | nindent 8) }}
      {{ $data := (fromYaml $templatedData) }}
      data: {{ toYaml $data.data | nindent 8 }}
      {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ if ($release | getOrNil "external-secrets" | getOrNil "dynamic-secrets" | getOrNil "enabled") }}
{{ range $secretName, $value := $release.dynamicSecrets }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-dynamic-secrets-{{ $secretName }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          metadata:
            annotations:
              replicator.v1.mittwald.de/replication-allowed: "true"
              replicator.v1.mittwald.de/replication-allowed-namespaces: {{ $releaseNamespace }}
          data:
            {{ $keys := ( $value.secretRef.key | splitList ",") }}
            {{ range $keys }}
            {{ . }}: |-
              {{ printf "%s%s%s" "{{ ." . " }}" }}
            {{ end }}
      data:
      {{ $keys := ( $value.secretRef.key | splitList ",") }}
      {{ range $keys }}
      - secretKey: {{ . }}
        remoteRef:
          key: {{ $releaseName }}-dynamic-secrets-{{ $secretName }}
          property: {{ . }}
      {{ end }}
{{ end }}
{{ end }}



{{ if (and ($release | getOrNil "rabbitmq" | getOrNil "enabled") ($release | getOrNil "external-secrets" | getOrNil "rabbitmq" | getOrNil "enabled")) }}

{{ $rabbitmq := ($release | getOrNil "rabbitmq") }}
{{ $rabbitmqVhost := (coalesce ($rabbitmq | getOrNil "vhost") "apps") }}
{{ $rabbitmqClusterRef := (coalesce ($rabbitmq | getOrNil "ref") (printf "%s-rabbitmq" $releaseName)) }}
{{ $rabbitmqSecretRefTemplate := (printf "rabbitmq-user-%s-rabbitmq-cluster-%s-%s-creds" $rabbitmqClusterRef $releaseNamespace $releaseName) }}

{{ $rabbitmqServiceRef := (printf "%s" $rabbitmqClusterRef) }}
{{ $rabbitmqServicePort := "5672" }}
{{ $prefix := "RABBITMQ" }}
{{ $hostKey := (printf ("%s_SERVER") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $vhostKey := (printf ("%s_VHOST") $prefix) }}
{{ $usernameKey := (printf ("%s_USER") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $vhostKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $vhostKey) $vhostKey) }}
{{ $usernameKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-rabbitmq
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          metadata:
            annotations:
              replicator.v1.mittwald.de/replication-allowed: "true"
              replicator.v1.mittwald.de/replication-allowed-namespaces: {{ $releaseNamespace }}
          data:
            {{ $hostKey }}: {{ $rabbitmqClusterRef | quote }}
            {{ $portKey }}: {{ $rabbitmqServicePort | quote }}
            {{ $vhostKey }}: {{ $rabbitmqVhost | quote }}
            {{ $usernameKey }}: "{{`{{ .rabbitmq_username }}`}}"
            {{ $passwordKey }}: "{{`{{ .rabbitmq_password }}`}}"
            {{ $uriKey }}: "amqp://{{`{{ .rabbitmq_username }}`}}:{{`{{ .rabbitmq_password }}`}}@{{ $rabbitmqClusterRef }}/{{ $rabbitmqVhost }}"
      data:
        - secretKey: rabbitmq_username
          remoteRef:
            key: {{ (coalesce ($release.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: username
        - secretKey: rabbitmq_password
          remoteRef:
            key: {{ (coalesce ($release.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: password
{{ end }}
# MongoDB
{{ if (and $releaseMongodbEnabled $releaseExternalSecretsMongodbEnabled $releaseMongodbRef) }}

{{ $databaseName := (coalesce ($release | getOrNil "mongodb" | getOrNil "database") $releaseName) }}

{{ $mongodbServiceRef := (printf "%s-svc" $releaseMongodbRef) }}
{{ $mongodbServicePort := "27017" }}
{{ $prefix := "DATABASE" }}
{{ if (or $releaseSqlEnabled) }}
{{ $prefix = "MONGODB" }}
{{ end }}
{{ $hostKey := (printf ("%s_HOST") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
{{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $databaseNameKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
{{ $usernameKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($release | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      # name: {{ $releaseName }}-{{ $releaseMongodbRef }}
      name: {{ $releaseName }}-mongodb
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          metadata:
            annotations:
              replicator.v1.mittwald.de/replication-allowed: "true"
              replicator.v1.mittwald.de/replication-allowed-namespaces: {{ $releaseNamespace }}
          data:
            {{ $hostKey }}: {{ $mongodbServiceRef | quote }}
            {{ $portKey }}: {{ $mongodbServicePort | quote }}
            {{ $databaseNameKey }}: {{ $databaseName | quote }}
            {{ $usernameKey }}: {{ $releaseName | quote }}
            {{ $passwordKey }}: "{{`{{ .mongodb_password }}`}}"
            {{ $uriKey }}: "mongodb://{{ $releaseName }}:{{`{{ .mongodb_password }}`}}@{{ $mongodbServiceRef }}/{{ $databaseName }}?replicaSet={{ $releaseMongodbRef }}"
      data:
        - secretKey: mongodb_password
          remoteRef:
            key: {{ $releaseMongodbRef }}-{{ $releaseName }}-{{ $releaseName }}-password
            property: password
{{ end }}


# SQL
{{ if (and $releaseSqlEnabled $releaseExternalSecretsSqlEnabled $releaseSqlRef) }}

{{ $databaseName := (coalesce ($release | getOrNil "sql" | getOrNil "database") $releaseName) | replace "-" "_" }}
{{ $username := $releaseName | replace "-" "_" }}

{{ $sqlServiceRef := (printf "%s-%s" $releaseNamespace $release.sql.ref) }}
{{ $sqlServicePort := "5432" }}
{{ $prefix := "DATABASE" }}
{{ if (or $releaseMongodbEnabled) }}
{{ $prefix = "SQL" }}
{{ end }}
{{ $hostKey := (printf ("%s_HOST") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
{{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $databaseNameKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
{{ $usernameKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($release | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-sql
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          metadata:
            annotations:
              replicator.v1.mittwald.de/replication-allowed: "true"
              replicator.v1.mittwald.de/replication-allowed-namespaces: {{ $releaseNamespace }}
          data:
            {{ $hostKey }}: {{ $sqlServiceRef | quote }}
            {{ $portKey }}: {{ $sqlServicePort | quote }}
            {{ $databaseNameKey }}: {{ $databaseName | quote }}
            {{ $usernameKey }}: "{{`{{ .sql_username }}`}}"
            {{ $passwordKey }}: "{{`{{ .sql_password }}`}}"
            {{ $uriKey }}: "postgres://{{`{{ .sql_username }}`}}:{{`{{ .sql_password }}`}}@{{ $sqlServiceRef }}:{{ $sqlServicePort }}/{{ $databaseName }}"
      data:
        - secretKey: sql_password
          remoteRef:
            key: {{ $releaseName }}.{{ $sqlServiceRef }}.credentials.postgresql.acid.zalan.do
            property: password
        - secretKey: sql_username
          remoteRef:
            key: {{ $releaseName }}.{{ $sqlServiceRef }}.credentials.postgresql.acid.zalan.do
            property: username
{{ end }}
