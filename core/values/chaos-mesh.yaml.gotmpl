cluster: {{ toYaml .Values.cluster | nindent 2 }}

nameOverride: ""
fullnameOverride: ""

# Custom labels to add
customLabels: {}
  # node.kube-core.io/anti-affinity: soft
  # node.kube-core.io/selector: safety

# clusterScoped is whether chaos-mesh should manage kubernetes cluster wide chaos
# Also see rbac.create and controllerManager.serviceAccount
clusterScoped: true

## Optional array of imagePullSecrets containing private registry credentials
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# - name: secretName

controllerManager:
  replicaCount: 3
  # If enabled, only pods in the namespace annotated with `"chaos-mesh.org/inject": "enabled"` could be injected
  enableFilterNamespace: true
  # targetNamespace only works with clusterScoped is false(namespace scoped mode).
  # It means namespace which will be injected chaos
  targetNamespace: chaos-mesh

  service:
    # Kubernetes Service type for service chaos-controller-manager
    type: ClusterIP

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
     cpu: 500m
     memory: 1024Mi
    requests:
      cpu: 25m
      memory: 256Mi
  # Node labels for chaos-controller-manager pod assignment
  nodeSelector: {}
  # Toleration labels for chaos-controller-manager pod assignment
  tolerations: []
  # Map of chaos-controller-manager node/pod affinities
  affinity: {}
  # chaosdSecurityMode is enabled for mTLS connection between chaos-controller-manager and chaosd

  ###
  chaosdSecurityMode: false # MODIFIED
  ###

chaosDaemon:

  mtls:
    # enable mtls on the grpc connection between chaos-controller-manager and chaos-daemon
    ###
    enabled: false # MODIFIED
    ###
  # Run chaos-daemon container in privileged mode. Processes in privileged containers
  # are essentially equivalent to root on the host.
  # If it is set to false, the following capabilities will be set. You can grant certain privileges
  # to a process without granting all the privileges of the root user.
  ## capabilities:
  ##   add:
  ##     - SYS_PTRACE
  ##     - NET_ADMIN
  ##     - MKNOD
  ##     - SYS_CHROOT
  ##     - SYS_ADMIN
  ##     - KILL
  ##     # CAP_IPC_LOCK is used to lock memory
  ##     - IPC_LOCK

  ###
  privileged: false # MODIFIED
  ###
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 50m
      memory: 64Mi
  # Node labels for chaos-daemon pod assignment
  nodeSelector: {}
  # Toleration labels for chaos-daemon pod assignment
  tolerations: []
  # Map of chaos-controller-manager node/pod affinities
  affinity: {}
dashboard:
  # Enable chaos-dashboard
  create: true
  replicaCount: 1

  ###
  securityMode: false # MODIFIED
  ###
  # Node labels for chaos-dashboard  pod assignment
  nodeSelector: {}
  # Toleration labels for chaos-dashboard pod assignment
  tolerations: []
  # Map of chaos-dashboard node/pod affinities
  affinity: {}
  # Deployment chaos-dashboard annotations
  podAnnotations: {}
  service:
    annotations: {}
    type: ClusterIP

  resources:
    limits:
     cpu: 500m
     memory: 1024Mi
    requests:
      cpu: 25m
      memory: 256Mi

  persistentVolume:
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClassName: standard

  ingress:
    ## Set to true to enable ingress record generation
    enabled: true

    ## Set this to true in order to add the corresponding annotations for cert-manager
    certManager: false

    ## Ingress annotations done as key:value pairs
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    ##
    ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
    annotations:
    {{ if .Values.cluster.common.defaultIngressAnnotations }}
      {{ toYaml .Values.cluster.common.defaultIngressAnnotations | nindent 4 }}
    {{- end }}
    {{- if (index .Values.releases .Release.Name "config" "ingress" "annotations") }}
      {{ toYaml (index .Values.releases .Release.Name "config" "ingress" "annotations") | nindent 4 }}
    {{- end }}    ## The list of hostnames to be covered with this ingress record.
    ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
    hosts:
      - name: {{ (index .Values.releases .Release.Name "config" "ingress" "subdomain") }}.{{ .Values.cluster.config.domain }}

        ## Set this to true in order to enable TLS on the ingress record
        tls: true

        ## Optionally specify the TLS hosts for the ingress record
        ## Useful when the Ingress controller supports www-redirection
        ## If not specified, the above host name will be used
        tlsHosts:
        - {{ (index .Values.releases .Release.Name "config" "ingress" "subdomain") }}.{{ .Values.cluster.config.domain }}

        ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
        tlsSecret: {{ (index .Values.releases .Release.Name "config" "ingress" "subdomain") | replace "." "-"}}-tls

    # Paths that map requests to chaos dashboard
    paths: ["/"]

    # Override apiVersion of ingress rendered by this helm chart
    apiVersionOverrides: ""

    # Defines which ingress controller will implement the resource
    ingressClassName: ""

webhook:
  certManager:
    # Setup the webhook using cert-manager
    enabled: true
