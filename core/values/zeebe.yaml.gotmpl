{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}
cluster: {{ toYaml $values.cluster | nindent 2 }}

# Default values for zeebe-cluster-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  elasticsearch:
    url:
    host: "elasticsearch-master"
    port: 9200
  zeebe: "{{ $releaseName }}-zeebe"

image:
  repository: camunda/zeebe
  tag: 1.1.2
  pullPolicy: IfNotPresent

clusterSize: "3"
partitionCount: "3"
replicationFactor: "3"
cpuThreadCount: "2"
ioThreadCount: "2"
pvcSize: "10Gi"
pvcAccessModes: [ "ReadWriteOnce" ]
env: []
logLevel: info

gateway:
  replicas: 1
  logLevel: info
  env: []
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable:
  resources:  {}

elasticsearch:
  enabled: true
  imageTag: 7.13.2

kibana:
  enabled: false
  imageTag: 7.13.2

prometheus:
  enabled: false
  servicemonitor:
    enabled: false

JavaOpts: >-
  -XX:MaxRAMPercentage=25.0
  -XX:+HeapDumpOnOutOfMemoryError
  -XX:HeapDumpPath=/usr/local/zeebe/data
  -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log
  -XX:+ExitOnOutOfMemoryError

labels:
  app: zeebe
serviceType: ClusterIP
serviceGatewayType: ClusterIP
serviceHttpPort: 9600
serviceGatewayPort: 26500
serviceCommandPort: 26501
serviceInternalPort: 26502
resources:
  requests:
    cpu: 500m
    memory: 2Gi
  limits:
    cpu: 1000m
    memory: 4Gi
probePath: /ready
readinessProbe:
  failureThreshold: 1
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
podDisruptionBudget:
  enabled: false
  minAvailable:
  maxUnavailable: 1

nodeSelector: {}

tolerations: []

affinity: {}
