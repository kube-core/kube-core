{{ $values := .Values }}
{{ $releaseNamespace := .Release.Namespace }}
{{ $releaseName := .Release.Name }}

name:
  appNameOverride: {{ $releaseName }}

image:
{{ if (.Values.applicationsList | getOrNil $releaseName) }}
  repository: "{{ (printf "%s/%s/%s" $values.cloud.registry.hostname $values.cloud.project $releaseName) }}"
{{ else }}
  repository: neo9sas/devops-tools
{{ end }}
  tag: latest

api:
  type: "node"
  deployedEnv: "{{ $releaseNamespace }}"
  logLevel: "info"

service:
  type: ClusterIP
  port: 8080

deployment:
  annotations:
    reloader.stakater.com/auto: 'true'

logging:
  enabled: true

pod:
  env:
    secrets:
      {{ if (.Values.applicationsList | getOrNil $releaseName | getOrNil "envFromSecret") }}
      {{ range (index .Values.applicationsList $releaseName "envFromSecret") }}
      - secretName: {{ $releaseName }}
        secretKey: {{ . }}
      {{ end }}
      {{ end }}
{{ if (.Values.applicationsList | getOrNil $releaseName) }}
{{ if (and (.Values.applicationsList | getOrNil $releaseName | getOrNil "external-secrets") (.Values.applicationsList | getOrNil $releaseName | getOrNil "mongodb" | getOrNil "enabled")) }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: MONGODB_URI
      - secretName: {{ $releaseName }}-mongodb
        secretKey: DATABASE_HOST
      - secretName: {{ $releaseName }}-mongodb
        secretKey: DATABASE_PORT
      - secretName: {{ $releaseName }}-mongodb
        secretKey: DATABASE_NAME
      - secretName: {{ $releaseName }}-mongodb
        secretKey: DATABASE_USERNAME
      - secretName: {{ $releaseName }}-mongodb
        secretKey: DATABASE_PASSWORD
{{ end }}
{{ if (and (.Values.applicationsList | getOrNil $releaseName | getOrNil "external-secrets") (.Values.applicationsList | getOrNil $releaseName | getOrNil "rabbitmq" | getOrNil "enabled")) }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: RABBITMQ_URI
{{ end }}
{{ end }}

ingress:
  className: "{{ coalesce $values.applicationsConfig.defaultIngressClass $values.servicesConfig.defaultIngressClass $values.cluster.common.defaultIngressClass }}"
  hosts:
    - host: {{ .Release.Name }}.{{ .Release.Namespace }}.{{ coalesce $values.applicationsConfig.domain $values.servicesConfig.domain $values.cluster.config.domain }}
      paths:
        - path: /
          pathType: ImplementationSpecific

metrics:
  enabled: true
  serviceMonitor:
    enabled: true

flux:
  enabled: true
  imageRepository:
    interval: 1m0s
    secretName: docker-registry-gcr-admin
  imageUpdateAutomation:
    enabled: false
    interval: 1m0s
    git:
      sourceRef: {{ $values.cluster.config.name }}
      # sourceNamespace: flux-system
      ref:
        branch: {{ $values.gitops.ref }}
      pushRef:
        branch: {{ $values.gitops.ref }}
      author:
        email: {{ $values.git.bot.user }}
        name: {{ $values.git.bot.name }}
      message: "chore: Updating images"
    update:
      path: {{ $values.gitops.path }}/{{ .Release.Namespace }}/{{ .Release.Name }}
      strategy: Setters
  defaultImagePolicy: default
  # imagePolicy: "flux-system:apps"
  defaultImagePoliciesEnabled: false
