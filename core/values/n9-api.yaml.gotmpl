{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


{{ $istio := (index $coreReleases "istio-discovery" "enabled" )}}

{{ $releaseSql := ($release | getOrNil "sql") }}
{{ $releaseSqlRef := ($releaseSql | getOrNil "ref") }}
{{ $releaseSqlEnabled := ($releaseSql | getOrNil "enabled") }}
{{ $releaseExternalSecretsSqlEnabled := ($release | getOrNil "external-secrets" | getOrNil "sql" | getOrNil "enabled") }}

{{ $releaseMongodb := ($release  | getOrNil "mongodb") }}
{{ $releaseMongodbRef := ($releaseMongodb | getOrNil "ref") }}
{{ $releaseMongodbEnabled := ($releaseMongodb | getOrNil "enabled") }}
{{ $releaseExternalSecretsMongodbEnabled := ($release | getOrNil "external-secrets" | getOrNil "mongodb" | getOrNil "enabled") }}

{{ $rabbitmq := ($release | getOrNil "rabbitmq") }}

{{ $defaultReplicaCount := 2 }}
{{ if (eq $releaseNamespace "dev") }}
{{ $defaultReplicaCount = 1 }}
{{ end }}

istio:
  enabled: {{ $istio }}

name:
  appNameOverride: {{ $releaseName }}

image:
{{ if ($release) }}
  repository: "{{ (printf "%s/%s/%s" $values.cloud.registry.hostname $values.cloud.project $releaseName) }}"
{{ else }}
  repository: neo9sas/devops-tools
{{ end }}
  tag: latest

api:
  type: "node"
  deployedEnv: "{{ $releaseNamespace }}"
  logLevel: "info"

service:
  type: ClusterIP
  port: 8080

deployment:
  # replicaCount: 2
  annotations:
    reloader.stakater.com/auto: 'true'

resources:
  limits:
    cpu: 250m
    memory: 250Mi
  requests:
    cpu: 250m
    memory: 250Mi

logging:
  enabled: true
# monitoring:
#   rules:
#     enabled: false
#     cpuAvg:
#       enabled: false
#       window: 1m
#     memoryAvg:
#       enabled: false
#       window: 1m
#     ingressAccessFreq:
#       enabled: false
#       window: 1m
#     serviceAccessFreq:
#       enabled: false
#       window: 1m
# scaling:
#   enabled: false
#   minReplicaCount: 1
#   maxReplicaCount: 10
#   cpuAvg:
#     enabled: false
#     threshold: 0.90
#   memoryAvg:
#     enabled: false
#     threshold: 0.90
#   serviceAccessFreq:
#     enabled: false
#     threshold: 10
#   ingressAccessFreq:
#     enabled: false
#     threshold: 10
pdb:
  minAvailable: 2
pod:
  {{ if ($release | getOrNil "configmaps") }}
  {{ range $key, $value := $release.configmaps }}
  mounts:
    configMap:
      - mountPath: /data/configmaps
        name: {{ $releaseName }}-{{ $key }}
  {{ end }}
  {{ end }}

  env:
    secrets:
      {{ if ($release | getOrNil "envFromSecret") }}
      {{ range (index $releaseName "envFromSecret") }}
      - secretName: {{ $releaseName }}
        secretKey: {{ . }}
      {{ end }}
      {{ end }}

      {{ if ($release | getOrNil "external-secrets" | getOrNil "dynamic-secrets" | getOrNil "enabled") }}
      {{ range $key, $value := $release.dynamicSecrets }}
      {{ $keys := ( $value.secretRef.key | splitList ",") }}
      {{ range $keys }}
      - secretName: {{ $releaseName }}-dynamic-secrets-{{ $key }}
        secretKey: {{ . }}
      {{ end }}
      {{ end }}
      {{ end }}

      {{ if ($release | getOrNil "secrets") }}
      {{ range $key, $value := $release.secrets }}
      {{ range ($value.secretRef.key | splitList ",") }}
      - secretName: {{ $value.secretRef.name }}
        secretKey: {{ . }}
        name: {{ (printf "%s_%s" $value.secretRef.name .) | snakecase | upper | replace "." "_" }}
      {{ end }}
      {{ end }}
      {{ end }}

      {{ if ($release | getOrNil "external-secrets" | getOrNil "generated" | getOrNil "enabled") }}
      {{ range $key, $value := (index $release "external-secrets" "generated" "secrets") }}

      {{ $keys := list }}
      {{ if ($value | getOrNil "template") }}
      {{ $keys = ($value.template | keys) }}
      {{ else if ($value | getOrNil "templatedData") }}
      {{ $templatedTemplate := (tpl ($value.templatedTemplate) (dict "coreValues" $values "releaseValues" $release "releaseNamespace" $releaseNamespace)) }}
      {{ $data := (fromYaml $templatedTemplate) }}
      {{ $keys = ($data | keys) }}
      {{ end }}

      {{ range $keys }}
      - secretName: {{ $releaseName }}-generated-{{ $key }}
        secretKey: {{ . }}
      {{ end }}

      {{ end }}
      {{ end }}

      {{ if ($release) }}
      {{ if (and ($release | getOrNil "external-secrets") ($releaseMongodb | getOrNil "enabled")) }}
      {{ $mongodbServiceRef := (printf "%s-svc" $releaseMongodbRef) }}
      {{ $mongodbServicePort := "27017" }}
      {{ $prefix := "DATABASE" }}
      {{ if (or $releaseSqlEnabled) }}
      {{ $prefix = "MONGODB" }}
      {{ end }}
      {{ $hostKey := (printf ("%s_HOST") $prefix) }}
      {{ $portKey := (printf ("%s_PORT") $prefix) }}
      {{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
      {{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
      {{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
      {{ $uriKey := (printf ("%s_URI") $prefix) }}

      {{ $hostKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
      {{ $portKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
      {{ $databaseNameKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
      {{ $usernameKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
      {{ $passwordKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
      {{ $uriKey = (coalesce ($releaseMongodb | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $hostKey }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $portKey }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $databaseNameKey }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $usernameKey }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $passwordKey }}
      - secretName: {{ $releaseName }}-mongodb
        secretKey: {{ $uriKey }}
      {{ end }}
      {{ if (and ($release | getOrNil "external-secrets") ($releaseSql | getOrNil "enabled")) }}
      {{ $sqlServiceRef := (printf "%s-%s" $releaseNamespace $release.sql.ref) }}
      {{ $sqlServicePort := "5432" }}
      {{ $prefix := "DATABASE" }}
      {{ if (or $releaseMongodbEnabled) }}
      {{ $prefix = "SQL" }}
      {{ end }}
      {{ $hostKey := (printf ("%s_HOST") $prefix) }}
      {{ $portKey := (printf ("%s_PORT") $prefix) }}
      {{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
      {{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
      {{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
      {{ $uriKey := (printf ("%s_URI") $prefix) }}

      {{ $hostKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
      {{ $portKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
      {{ $databaseNameKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
      {{ $usernameKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
      {{ $passwordKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
      {{ $uriKey = (coalesce ($releaseSql | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $hostKey }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $portKey }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $databaseNameKey }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $usernameKey }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $passwordKey }}
      - secretName: {{ $releaseName }}-sql
        secretKey: {{ $uriKey }}
      {{ end }}
      {{ if (and ($release | getOrNil "external-secrets") ($rabbitmq | getOrNil "enabled")) }}
      {{ $rabbitmqVhost := (coalesce ($rabbitmq | getOrNil "vhost") "apps") }}
      {{ $rabbitmqClusterRef := (coalesce ($rabbitmq | getOrNil "ref") (printf "%s-rabbitmq" $releaseName)) }}
      {{ $rabbitmqSecretRefTemplate := (printf "rabbitmq-user-%s-rabbitmq-cluster-%s-%s-creds" $rabbitmqClusterRef $releaseNamespace $releaseName) }}

      {{ $rabbitmqServiceRef := (printf "%s" $rabbitmqClusterRef) }}
      {{ $rabbitmqServicePort := "5672" }}
      {{ $prefix := "RABBITMQ" }}
      {{ $hostKey := (printf ("%s_SERVER") $prefix) }}
      {{ $portKey := (printf ("%s_PORT") $prefix) }}
      {{ $vhostKey := (printf ("%s_VHOST") $prefix) }}
      {{ $usernameKey := (printf ("%s_USER") $prefix) }}
      {{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
      {{ $uriKey := (printf ("%s_URI") $prefix) }}

      {{ $hostKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
      {{ $portKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
      {{ $vhostKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $vhostKey) $vhostKey) }}
      {{ $usernameKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
      {{ $passwordKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
      {{ $uriKey = (coalesce ($release | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $hostKey }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $portKey }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $vhostKey }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $usernameKey }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $passwordKey }}
      - secretName: {{ $releaseName }}-rabbitmq
        secretKey: {{ $uriKey }}
      {{ end }}
      {{ end }}

ingress:
  className: "{{ coalesce $values.cluster.common.defaultIngressClass }}"
  hosts:
    - host: {{ .Release.Name }}.{{ .Release.Namespace }}.{{ coalesce $values.cluster.config.domain }}
      paths:
        - path: /
          pathType: ImplementationSpecific
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/upstream-vhost: "{{ $releaseName }}.{{ $releaseNamespace }}.svc.cluster.local"
  labels:

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 2s

flux:
  enabled: true
  imageRepository:
    interval: 1m0s
    secretName: docker-registry-gcr-admin
  imageUpdateAutomation:
    enabled: false
    interval: 1m0s
    git:
      sourceRef: {{ $values.cluster.config.name }}
      # sourceNamespace: flux-system
      ref:
        branch: {{ $values.gitops.ref }}
      pushRef:
        branch: {{ $values.gitops.ref }}
      author:
        email: {{ $values.git.bot.user }}
        name: {{ $values.git.bot.name }}
      message: "chore: Updating images"
    update:
      path: {{ $values.gitops.path }}/{{ .Release.Namespace }}/{{ .Release.Name }}
      strategy: Setters
  defaultImagePolicy: default
  # imagePolicy: "flux-system:apps"
  defaultImagePoliciesEnabled: false
