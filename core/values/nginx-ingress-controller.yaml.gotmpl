{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}

{{ $coreRelease := (index $values.releases "nginx-ingress-controller") }}
{{ $isIstio := false }}
{{ if (and (eq $releaseName "nginx-ingress-controller") (eq $releaseNamespace "nginx-ingress")) }}
ingressClassResource:
  name: {{ $values.cluster.common.defaultIngressClass }}
  enabled: true
  default: true
  controllerClass: {{ $values.cluster.common.defaultIngressClassPrefix }}/ingress-{{ $values.cluster.common.defaultIngressClass }}
  parameters: {}
electionID: {{ $values.cluster.common.defaultIngressClass }}
extraArgs:
  ingress-class: {{ $values.cluster.common.defaultIngressClass }}
fullnameOverride: nginx-ingress-controller
{{ else if (and (eq $releaseName "nginx-istio-ingress-controller") (eq $releaseNamespace "nginx-istio-ingress")) }}
{{ $isIstio = true }}
ingressClassResource:
  name: {{ $values.cluster.common.defaultIngressClass }}-istio
  enabled: true
  default: false
  controllerClass: {{ $values.cluster.common.defaultIngressClassPrefix }}/ingress-{{ $values.cluster.common.defaultIngressClass }}-istio
  parameters: {}
electionID: {{ $values.cluster.common.defaultIngressClass }}-istio
extraArgs:
  ingress-class: {{ $values.cluster.common.defaultIngressClass }}-istio
fullnameOverride: nginx-istio-ingress-controller
{{ else if (and (eq $releaseName "nginx-istio-ingress-controller") (not (eq $releaseNamespace "nginx-istio-ingress"))) }}
{{ $isIstio = true }}
ingressClassResource:
  name: {{ $values.cluster.common.defaultIngressClass }}-istio-{{ $releaseNamespace }}
  enabled: true
  default: false
  controllerClass: {{ $values.cluster.common.defaultIngressClassPrefix }}/ingress-{{ $values.cluster.common.defaultIngressClass }}-istio-{{ $releaseNamespace }}
  parameters: {}
electionID: {{ $values.cluster.common.defaultIngressClass }}-istio-{{ $releaseNamespace }}
extraArgs:
  ingress-class: {{ $values.cluster.common.defaultIngressClass }}-istio-{{ $releaseNamespace }}
fullnameOverride: nginx-istio-ingress-controller-{{ $releaseNamespace }}
{{ else }}
ingressClassResource:
  name: {{ $values.cluster.common.defaultIngressClass }}-{{ $releaseNamespace }}
  enabled: true
  default: false
  controllerClass: {{ $values.cluster.common.defaultIngressClassPrefix }}/ingress-{{ $values.cluster.common.defaultIngressClass }}-{{ $releaseNamespace }}
  parameters: {}
electionID: {{ $values.cluster.common.defaultIngressClass }}-{{ $releaseNamespace }}
extraArgs:
  ingress-class: {{ $values.cluster.common.defaultIngressClass }}-{{ $releaseNamespace }}
fullnameOverride: nginx-ingress-controller-{{ $releaseNamespace }}
{{ end }}

kind: Deployment

## Number of replicas
##
replicaCount: {{ index $coreRelease "config" "replicaCount" }}
minAvailable: {{ index $coreRelease "config" "minAvailable" }}

autoscaling: {{ toYaml (index $coreRelease "config" "autoscaling") | nindent 2 }}

## Required on CNI based K8s installations, since CNI and hostport don't mix yet.
## Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged
##
hostNetwork: {{ index $coreRelease "config" "hostNetwork" }}

## Optionally, change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
## By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
## to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
##
dnsPolicy: {{ index $coreRelease "config" "dnsPolicy" }}

## Required only if defaultBackend.enabled = false
## Must be <namespace>/<service_name>
##
defaultBackendService: {{ index $coreRelease "config" "defaultBackendService" }}

## Bare-metal considerations via the host network
## ref: https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network
##
reportNodeInternalIp: false



## Allows customization of the external service
## the ingress will be bound to via DNS
##
publishService:
  enabled: true
  ## Allows overriding of the publish service to bind to
  ## Must be <namespace>/<service_name>
  ##
  pathOverride: ''

service:
  ## Service type
  ##
  type: LoadBalancer
  ## Service ports
  ##
  ports:
    http: 80
    https: 443
  ## Specify the nodePort value(s) for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    http: ''
    https: ''
    tcp: {}
    udp: {}

  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  {{ if eq $values.cloud.provider "aws" }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '60'
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: |
      Team=devops,
      kubernetes=true,
      Company=kube-core,
      Environment=aws,
      Project={{ $values.cloud.project }}
  {{ else }}
  annotations: {}
  {{ end }}
  ## Provide any additional label which may be required.
  ##
  labels: {}

  ## clusterIP (optional)
  ##
  # clusterIP:

  ## List of IP addresses at which the controller services are available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

  ## loadBalancerIP (optional, cloud specific)
  ## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  ##

  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  loadBalancerSourceRanges: []

  ## Set external traffic policy to: "Local" to preserve source IP on providers supporting it
  ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
  ##
  externalTrafficPolicy: Local
  healthCheckNodePort: 0


metrics:
  enabled: {{ ($values.releases.kps.enabled) }}
  serviceMonitor:
    enabled: {{ ($values.releases.kps.enabled) }}
    interval: 15s
    namespace: {{ $releaseNamespace }}

{{ if $isIstio }}
podAnnotations:
  prometheus.io/port: '10254'
  prometheus.io/scrape: 'true'
  # Do not redirect inbound traffic to Envoy.
  traffic.sidecar.istio.io/includeInboundPorts: ""
  traffic.sidecar.istio.io/excludeInboundPorts: "80,443"
  # Exclude outbound traffic to kubernetes master from redirection.
  traffic.sidecar.istio.io/excludeOutboundIPRanges: {{ coalesce ($coreRelease | getOrNil "config" | getOrNil "clusterIP") "0.0.0.0/0" }}
  sidecar.istio.io/inject: 'true'
{{ end }}

tolerations: {{ toYaml (index $coreRelease "config" "tolerations") | nindent 2 }}
nodeSelector: {{ toYaml (index $coreRelease "config" "nodeSelector") | nindent 2 }}
affinity: {{ toYaml (index $coreRelease "config" "affinity") | nindent 2 }}

pdb:
  create: true

rbac:
  rules:
    - apiGroups:
        - ""
      resources:
        - "*"
      verbs:
        - "*"

resources:
  requests:
    cpu: 50m
    memory: 250Mi
