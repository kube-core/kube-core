{{ $values := .values }}
{{ $releases := (merge $values.releases $values.applications $values.services )}}
{{ $releaseNamespace := .releaseNamespace }}

{{ $cloudProject := $values.cloud.project }}
{{ $cloudLocation := $values.cloud.default.location }}
{{ $clusterName := $values.cluster.config.name }}


{{ $mainReleaseName := (.releaseName | replace "-external-secrets" "") }}
{{ $releaseName := .releaseName }}
{{ $mainRelease := ($releases | getOrNil $mainReleaseName) }}
{{ $currentRelease := ($releases | getOrNil $releaseName) }}
{{ $releaseCloud := (index $releases $mainReleaseName "cloud" )}}
{{ $releaseCloudEnabled := ($releaseCloud | getOrNil "enabled") }}
{{ $cloudNamingConfig := $values.cloud.naming }}

{{ $releaseSqlRef := $currentRelease | getOrNil "sql" | getOrNil "ref" }}
{{ $releaseSqlEnabled := ($currentRelease | getOrNil "sql" | getOrNil "enabled") }}
{{ $releaseExternalSecretsSqlEnabled := ($currentRelease | getOrNil "external-secrets" | getOrNil "sql" | getOrNil "enabled") }}

{{ $releaseMongodbRef := $currentRelease | getOrNil "mongodb" | getOrNil "ref" }}
{{ $releaseMongodbEnabled := ($currentRelease | getOrNil "mongodb" | getOrNil "enabled") }}
{{ $releaseExternalSecretsMongodbEnabled := ($currentRelease | getOrNil "external-secrets" | getOrNil "mongodb" | getOrNil "enabled") }}

{{ $name := $mainReleaseName }}
{{ $initials := (($name | splitList "-") | join " " | initials) }}

{{ $clusterShortName := $values.cluster.config.shortName }}
{{ $releaseType := ""}}
{{ if (eq $mainRelease.type "release") }}
{{ $releaseType = "kc" }}
{{ else if (eq $mainRelease.type "application") }}
{{ $releaseType = "app" }}
{{ else if (eq $mainRelease.type "service") }}
{{ $releaseType = "svc" }}
{{ end }}

{{ $autoShortName := "" }}
{{ $namespace := ($releaseNamespace | substr 0 3) }}
{{ $autoShortName = (printf "%s-%s-%s-%s" $clusterShortName $releaseType $namespace $initials) }}
{{ $shortName := "" }}
{{ if (and $releaseCloudEnabled $cloudNamingConfig.enabled) }}
{{ $shortName = (index $mainRelease.metadata.namingConfig.nameBases (coalesce ($values.cloud.naming.config.templates | getOrNil "custom" | getOrNil "nameBase" | default "" | camelcase | untitle) ($values.cloud.naming.config.templates.default.nameBase | camelcase | untitle))) }}
{{ else }}
{{ $shortName = $autoShortName }}
{{ end }}

{{ $name = $shortName }}

{{ if (eq ($mainRelease | getOrNil "type") "release") }}
{{ $externalSecrets := ($mainRelease | getOrNil "external-secrets") }}
manifests:
{{ range $key, $value := $externalSecrets }}
- apiVersion: external-secrets.io/v1beta1
  kind: ExternalSecret
  metadata:
    name: {{ $key }}
  spec:
    refreshInterval: "1m"
    secretStoreRef:
      name: k8s-crossplane-system
      kind: ClusterSecretStore
    target:
      creationPolicy: Owner
      ## TODO: Migrate to templated template, need to globally share releases variables used for naming, look at kps for eg.
      {{ if $values.cloud.naming.enabled }}
      {{ $releaseServiceAccountKeyName := (index $mainRelease.metadata.namingConfig.nameBases (coalesce ($values.cloud.naming.config.templates | getOrNil "custom" | getOrNil "serviceAccountKeyName" | default "" | camelcase | untitle) ($values.cloud.naming.config.templates.default.serviceAccountKeyName | camelcase | untitle))) }}
      {{ $releaseBucketName := (index $mainRelease.metadata.namingConfig.nameBases (coalesce ($values.cloud.naming.config.templates | getOrNil "custom" | getOrNil "bucketName" | default "" | camelcase | untitle) ($values.cloud.naming.config.templates.default.bucketName | camelcase | untitle))) }}
      template:
        data: {{ (tpl $value.data (dict "name" $releaseBucketName)) | nindent 10 }}
    data:
      - secretKey: privateKey
        remoteRef:
          key: {{ $releaseServiceAccountKeyName }}
          property: privateKey
      {{ else }}
      template:
        data: {{ (tpl $value.data (dict "name" $name)) | nindent 10 }}
    data:
      - secretKey: privateKey
        remoteRef:
          key: {{ $name }}
          property: privateKey
      {{ end }}
{{ end }}

{{ else }}

manifests:
{{ if ($currentRelease | getOrNil "external-secrets" | getOrNil "generated" | getOrNil "enabled") }}
{{ range $secretName, $value := (index $currentRelease "external-secrets" "generated" "secrets") }}
{{ if ($value | getOrNil "enabled") }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-generated-{{ $secretName }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        {{ if ($value | getOrNil "template") }}
        template:
          data: {{ toYaml ($value | getOrNil "template") | nindent 12 }}
        {{ else if ($value | getOrNil "templatedTemplate") }}
        template:
          data: {{ tpl ($value.templatedTemplate) (dict "coreValues" $values "releaseValues" $currentRelease "parentReleaseValues" $mainRelease "releaseNamespace" $releaseNamespace ) | nindent 12 }}
        {{ end }}
      {{ if ($value | getOrNil "data") }}
      data: {{ toYaml $value.data | nindent 8 }}
      {{ else if $value | getOrNil "templatedData" }}
      {{ $templatedData := (tpl ( $value.templatedData) (dict "coreValues" $values "releaseValues" $currentRelease "parentReleaseValues" $mainRelease "releaseNamespace" $releaseNamespace ) | nindent 8) }}
      {{ $data := (fromYaml $templatedData) }}
      data: {{ toYaml $data.data | nindent 8 }}
      {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ if ($currentRelease | getOrNil "external-secrets" | getOrNil "dynamic-secrets" | getOrNil "enabled") }}
{{ range $secretName, $value := $currentRelease.dynamicSecrets }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-dynamic-secrets-{{ $secretName }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          data:
            {{ $keys := ( $value.secretRef.key | splitList ",") }}
            {{ range $keys }}
            {{ . }}: |-
              {{ printf "%s%s%s" "{{ ." . " }}" }}
            {{ end }}
      data:
      {{ $keys := ( $value.secretRef.key | splitList ",") }}
      {{ range $keys }}
      - secretKey: {{ . }}
        remoteRef:
          key: {{ $mainReleaseName }}-dynamic-secrets-{{ $secretName }}
          property: {{ . }}
      {{ end }}
{{ end }}
{{ end }}



{{ if (and ($currentRelease | getOrNil "rabbitmq" | getOrNil "enabled") ($currentRelease | getOrNil "external-secrets" | getOrNil "rabbitmq" | getOrNil "enabled")) }}

{{ $rabbitmq := ($mainRelease | getOrNil "rabbitmq") }}
{{ $rabbitmqVhost := (coalesce ($rabbitmq | getOrNil "vhost") "apps") }}
{{ $rabbitmqClusterRef := (coalesce ($rabbitmq | getOrNil "ref") (printf "%s-rabbitmq" $mainReleaseName)) }}
{{ $rabbitmqSecretRefTemplate := (printf "rabbitmq-user-%s-rabbitmq-cluster-%s-%s-creds" $rabbitmqClusterRef $releaseNamespace $mainReleaseName) }}

{{ $rabbitmqServiceRef := (printf "%s" $rabbitmqClusterRef) }}
{{ $rabbitmqServicePort := "5672" }}
{{ $prefix := "RABBITMQ" }}
{{ $hostKey := (printf ("%s_SERVER") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $vhostKey := (printf ("%s_VHOST") $prefix) }}
{{ $usernameKey := (printf ("%s_USER") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $vhostKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $vhostKey) $vhostKey) }}
{{ $usernameKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($currentRelease | getOrNil "rabbitmq" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-rabbitmq
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          data:
            {{ $hostKey }}: {{ $rabbitmqClusterRef | quote }}
            {{ $portKey }}: {{ $rabbitmqServicePort | quote }}
            {{ $vhostKey }}: {{ $rabbitmqVhost | quote }}
            {{ $usernameKey }}: "{{`{{ .rabbitmq_username }}`}}"
            {{ $passwordKey }}: "{{`{{ .rabbitmq_password }}`}}"
            {{ $uriKey }}: "amqp://{{`{{ .rabbitmq_username }}`}}:{{`{{ .rabbitmq_password }}`}}@{{ $rabbitmqClusterRef }}/{{ $rabbitmqVhost }}"
      data:
        - secretKey: rabbitmq_username
          remoteRef:
            key: {{ (coalesce ($currentRelease.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: username
        - secretKey: rabbitmq_password
          remoteRef:
            key: {{ (coalesce ($currentRelease.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: password
{{ end }}
# MongoDB
{{ if (and $releaseMongodbEnabled $releaseExternalSecretsMongodbEnabled $releaseMongodbRef) }}

{{ $databaseName := (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "database") $releaseName) }}

{{ $mongodbServiceRef := (printf "%s-svc" $releaseMongodbRef) }}
{{ $mongodbServicePort := "27017" }}
{{ $prefix := "DATABASE" }}
{{ if (or $releaseSqlEnabled) }}
{{ $prefix = "MONGODB" }}
{{ end }}
{{ $hostKey := (printf ("%s_HOST") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
{{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $databaseNameKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
{{ $usernameKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      # name: {{ $releaseName }}-{{ $releaseMongodbRef }}
      name: {{ $releaseName }}-mongodb
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          data:
            {{ $hostKey }}: {{ $mongodbServiceRef | quote }}
            {{ $portKey }}: {{ $mongodbServicePort | quote }}
            {{ $databaseNameKey }}: {{ $databaseName | quote }}
            {{ $usernameKey }}: {{ $releaseName | quote }}
            {{ $passwordKey }}: "{{`{{ .mongodb_password }}`}}"
            {{ $uriKey }}: "mongodb://{{ $releaseName }}:{{`{{ .mongodb_password }}`}}@{{ $mongodbServiceRef }}/{{ $databaseName }}?replicaSet={{ $releaseMongodbRef }}"
      data:
        - secretKey: mongodb_password
          remoteRef:
            key: {{ $releaseMongodbRef }}-{{ $releaseName }}-{{ $releaseName }}-password
            property: password
{{ end }}


# SQL
{{ if (and $releaseSqlEnabled $releaseExternalSecretsSqlEnabled $releaseSqlRef) }}

{{ $databaseName := (coalesce ($currentRelease | getOrNil "sql" | getOrNil "database") $releaseName) | replace "-" "_" }}
{{ $username := $releaseName | replace "-" "_" }}

{{ $sqlServiceRef := (printf "%s-%s" $releaseNamespace $currentRelease.sql.ref) }}
{{ $sqlServicePort := "5432" }}
{{ $prefix := "DATABASE" }}
{{ if (or $releaseMongodbEnabled) }}
{{ $prefix = "SQL" }}
{{ end }}
{{ $hostKey := (printf ("%s_HOST") $prefix) }}
{{ $portKey := (printf ("%s_PORT") $prefix) }}
{{ $databaseNameKey := (printf ("%s_NAME") $prefix) }}
{{ $usernameKey := (printf ("%s_USERNAME") $prefix) }}
{{ $passwordKey := (printf ("%s_PASSWORD") $prefix) }}
{{ $uriKey := (printf ("%s_URI") $prefix) }}

{{ $hostKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $hostKey) $hostKey) }}
{{ $portKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $portKey) $portKey) }}
{{ $databaseNameKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $databaseNameKey) $databaseNameKey) }}
{{ $usernameKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $usernameKey) $usernameKey) }}
{{ $passwordKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $passwordKey) $passwordKey) }}
{{ $uriKey = (coalesce ($currentRelease | getOrNil "sql" | getOrNil "secretMappings" | getOrNil $uriKey) $uriKey) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-sql
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          data:
            {{ $hostKey }}: {{ $sqlServiceRef | quote }}
            {{ $portKey }}: {{ $sqlServicePort | quote }}
            {{ $databaseNameKey }}: {{ $databaseName | quote }}
            {{ $usernameKey }}: "{{`{{ .sql_username }}`}}"
            {{ $passwordKey }}: "{{`{{ .sql_password }}`}}"
            {{ $uriKey }}: "postgres://{{`{{ .sql_username }}`}}:{{`{{ .sql_password }}`}}@{{ $sqlServiceRef }}:{{ $sqlServicePort }}/{{ $databaseName }}"
      data:
        - secretKey: sql_password
          remoteRef:
            key: {{ $releaseName }}.{{ $sqlServiceRef }}.credentials.postgresql.acid.zalan.do
            property: password
        - secretKey: sql_username
          remoteRef:
            key: {{ $releaseName }}.{{ $sqlServiceRef }}.credentials.postgresql.acid.zalan.do
            property: username
{{ end }}

{{ end }}
