{{ $values := .values }}
{{ $releases := (merge $values.releases $values.applicationsList $values.servicesList )}}
{{ $releaseNamespace := .releaseNamespace }}

{{ $cloudProject := $values.cloud.project }}
{{ $cloudLocation := $values.cloud.default.location }}
{{ $clusterName := $values.cluster.config.name }}


{{ $mainReleaseName := (.releaseName | replace "-external-secrets" "") }}
{{ $releaseName := .releaseName }}
{{ $mainRelease := ($releases | getOrNil $mainReleaseName) }}
{{ $currentRelease := ($releases | getOrNil $releaseName) }}
{{ $releaseCloud := (index $releases $mainReleaseName "cloud" )}}
{{ $releaseCloudEnabled := ($releaseCloud | getOrNil "enabled") }}
{{ $cloudNamingConfig := $values.cloud.naming }}

{{ $name := $mainReleaseName }}
{{ $initials := (($name | splitList "-") | join " " | initials) }}

{{ $clusterShortName := $values.cluster.config.shortName }}
{{ $releaseType := ""}}
{{ if (eq $mainRelease.type "release") }}
{{ $releaseType = "kc" }}
{{ else if (eq $mainRelease.type "application") }}
{{ $releaseType = "app" }}
{{ else if (eq $mainRelease.type "service") }}
{{ $releaseType = "svc" }}
{{ end }}

{{ $autoShortName := "" }}
{{ $namespace := ($releaseNamespace | substr 0 3) }}
{{ $autoShortName = (printf "%s-%s-%s-%s" $clusterShortName $releaseType $namespace $initials) }}
{{ $shortName := "" }}
{{ if (and $releaseCloudEnabled $cloudNamingConfig.enabled) }}
{{ $shortName = (index $mainRelease.metadata.namingConfig.nameBases (coalesce ($values.cloud.naming.config.templates | getOrNil "custom" | getOrNil "nameBase" | default "" | camelcase | untitle) ($values.cloud.naming.config.templates.default.nameBase | camelcase | untitle))) }}
{{ else }}
{{ $shortName = $autoShortName }}
{{ end }}

{{ $name = $shortName }}


{{ if (eq ($mainRelease | getOrNil "type") "release") }}
{{ $externalSecrets := ($mainRelease | getOrNil "external-secrets") }}
manifests:
{{ range $key, $value := $externalSecrets }}
- apiVersion: external-secrets.io/v1beta1
  kind: ExternalSecret
  metadata:
    name: {{ $key }}
  spec:
    refreshInterval: "1m"
    secretStoreRef:
      name: k8s-crossplane-system
      kind: ClusterSecretStore
    target:
      creationPolicy: Owner
      template:
        data: {{ (tpl $value.data (dict "name" $name)) | nindent 10 }}
    data:
      - secretKey: privateKey
        remoteRef:
          key: {{ $name }}
          property: privateKey
{{ end }}

{{ else }}

manifests:
{{ if ($currentRelease | getOrNil "external-secrets" | getOrNil "generated" | getOrNil "enabled") }}
{{ range $secretName, $value := (index $currentRelease "external-secrets" "generated" "secrets") }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-generated-{{ $secretName }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        {{ if ($value | getOrNil "template") }}
        template:
          data: {{ toYaml ($value | getOrNil "template") | nindent 12 }}
        {{ else if ($value | getOrNil "templatedTemplate") }}
        template:
          data: {{ tpl ($value.templatedTemplate) (dict "coreValues" $values "releaseValues" $currentRelease "parentReleaseValues" $mainRelease "releaseNamespace" $releaseNamespace ) | nindent 12 }}
        {{ end }}
      {{ if ($value | getOrNil "data") }}
      data: {{ toYaml $value.data | nindent 8 }}
      {{ else if $value | getOrNil "templatedData" }}
      {{ $templatedData := (tpl ( $value.templatedData) (dict "coreValues" $values "releaseValues" $currentRelease "parentReleaseValues" $mainRelease "releaseNamespace" $releaseNamespace ) | nindent 8) }}
      {{ $data := (fromYaml $templatedData) }}
      data: {{ toYaml $data.data | nindent 8 }}
      {{ end }}
{{ end }}
{{ end }}

{{ if ($currentRelease | getOrNil "external-secrets" | getOrNil "dynamic-secrets" | getOrNil "enabled") }}
{{ range $secretName, $value := $currentRelease.dynamicSecrets }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-dynamic-secrets-{{ $secretName }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          data:
            {{ $keys := ( $value.secretRef.key | splitList ",") }}
            {{ range $keys }}
            {{ . }}: |-
              {{ printf "%s%s%s" "{{ ." . " }}" }}
            {{ end }}
      data:
      {{ $keys := ( $value.secretRef.key | splitList ",") }}
      {{ range $keys }}
      - secretKey: {{ . }}
        remoteRef:
          key: {{ $mainReleaseName }}-dynamic-secrets-{{ $secretName }}
          property: {{ . }}
      {{ end }}
{{ end }}
{{ end }}



{{ if (and ($currentRelease | getOrNil "rabbitmq" | getOrNil "enabled") ($currentRelease | getOrNil "external-secrets" | getOrNil "rabbitmq" | getOrNil "enabled")) }}

{{ $rabbitmq := ($mainRelease | getOrNil "rabbitmq") }}
{{ $vhost := (coalesce ($rabbitmq | getOrNil "vhost") "apps") }}
{{ $rabbitmqClusterRef := (coalesce ($rabbitmq | getOrNil "ref") (printf "%s-rabbitmq" $mainReleaseName)) }}
{{ $rabbitmqSecretRefTemplate := (printf "rabbitmq-user-%s-rabbitmq-cluster-%s-%s-creds" $rabbitmqClusterRef $releaseNamespace $mainReleaseName) }}

  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $releaseName }}-rabbitmq
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        creationPolicy: Owner
        template:
          data:
            {{ if ($currentRelease.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_SERVER")  }}
            {{ ($currentRelease.rabbitmq.secretMappings.RABBITMQ_SERVER) }}: "{{ $rabbitmqClusterRef }}"
            {{ else }}
            RABBITMQ_SERVER: "{{ $rabbitmqClusterRef }}"
            {{ end }}

            {{ if ($currentRelease.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_PORT") }}
            {{ ($currentRelease.rabbitmq.secretMappings.RABBITMQ_PORT) }}: "5672"
            {{ else }}
            RABBITMQ_PORT: "5672"
            {{ end }}

            {{ if ($currentRelease.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_VHOST") }}
            {{ ($currentRelease.rabbitmq.secretMappings.RABBITMQ_VHOST) }}: "{{ $vhost }}"
            {{ else }}
            RABBITMQ_VHOST: "{{ $vhost }}"
            {{ end }}

            {{ if ($currentRelease.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_USER") }}
            {{ ($currentRelease.rabbitmq.secretMappings.RABBITMQ_USER) }}: "{{ $releaseName }}"
            {{ else }}
            RABBITMQ_USER: "{{`{{ .rabbitmq_username }}`}}"
            {{ end }}

            {{ if ($currentRelease.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_PASSWORD") }}
            {{ ($currentRelease.rabbitmq.secretMappings.RABBITMQ_PASSWORD) }}: "{{`{{ .rabbitmq_password }}`}}"
            {{ else }}
            RABBITMQ_PASSWORD: "{{`{{ .rabbitmq_password }}`}}"
            {{ end }}

            RABBITMQ_URI: amqp://{{`{{ .rabbitmq_username }}`}}:{{`{{ .rabbitmq_password }}`}}@{{ $rabbitmqClusterRef }}/{{ $vhost }}
      data:
        - secretKey: rabbitmq_username
          remoteRef:
            key: {{ (coalesce ($currentRelease.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: username
        - secretKey: rabbitmq_password
          remoteRef:
            key: {{ (coalesce ($currentRelease.rabbitmq | getOrNil "secretRef") $rabbitmqSecretRefTemplate) }}
            property: password
{{ end }}
# MongoDB
{{ if (and ($currentRelease | getOrNil "external-secrets" | getOrNil "mongodb" | getOrNil "enabled") ($currentRelease | getOrNil "mongodb" | getOrNil "ref")) }}
{{ $databaseName := (coalesce ($currentRelease | getOrNil "mongodb" | getOrNil "database") $releaseName) }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      # name: {{ $releaseName }}-{{ $currentRelease.mongodb.ref }}
      name: {{ $releaseName }}-mongodb
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          data:
            {{ if ($currentRelease.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_HOST") }}
            {{ ($currentRelease.mongodb.secretMappings.DATABASE_HOST) }}: "{{ $currentRelease.mongodb.ref }}-svc"
            {{ else }}
            DATABASE_HOST: "{{ $currentRelease.mongodb.ref }}-svc"
            {{ end }}

            {{ if ($currentRelease.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_PORT") }}
            {{ ($currentRelease.mongodb.secretMappings.DATABASE_PORT) }}: "27017"
            {{ else }}
            DATABASE_PORT: "27017"
            {{ end }}

            {{ if ($currentRelease.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_NAME") }}
            {{ ($currentRelease.mongodb.secretMappings.DATABASE_NAME) }}: "{{ $databaseName }}"
            {{ else }}
            DATABASE_NAME: "{{ $databaseName }}"
            {{ end }}

            {{ if ($currentRelease.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_USERNAME") }}
            {{ ($currentRelease.mongodb.secretMappings.DATABASE_USERNAME) }}: "{{ $releaseName }}"
            {{ else }}
            DATABASE_USERNAME: "{{ $releaseName }}"
            {{ end }}

            {{ if ($currentRelease.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_PASSWORD") }}
            {{ ($currentRelease.mongodb.secretMappings.DATABASE_PASSWORD) }}: "{{`{{ .mongodb_password }}`}}"
            {{ else }}
            DATABASE_PASSWORD: "{{`{{ .mongodb_password }}`}}"
            {{ end }}

            MONGODB_URI: mongodb://{{ $releaseName }}:{{`{{ .mongodb_password }}`}}@{{ $currentRelease.mongodb.ref }}-svc/{{ $databaseName }}?replicaSet={{ $currentRelease.mongodb.ref }}
      data:
        - secretKey: mongodb_password
          remoteRef:
            key: {{ $currentRelease.mongodb.ref }}-{{ $releaseName }}-{{ $releaseName }}-password
            property: password
{{ end }}
{{ end }}
