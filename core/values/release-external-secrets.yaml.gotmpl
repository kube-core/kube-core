{{ $values := .Values }}
{{ $releaseNamespace := .Release.Namespace }}
{{ $mainReleaseName := (.Release.Name | replace "-external-secrets" "") }}
{{ $releases := (merge $values.releases $values.applicationsList $values.servicesList )}}

{{ $cloudProject := $values.cloud.project }}
{{ $cloudLocation := $values.cloud.default.location }}
{{ $clusterName := $values.cluster.config.name }}


{{ $mainRelease := ($releases | getOrNil $mainReleaseName) }}
{{ $releaseCloud := ($releases | getOrNil $mainReleaseName | getOrNil "cloud" )}}
{{ $name := $mainReleaseName }}
{{ $initials := (($name | splitList "-") | join " " | initials) }}
{{ $clusterShortName := $values.cluster.config.shortName }}
{{ $releaseType := ""}}
{{ if (eq ($mainRelease | getOrNil "type") "release") }}
{{ $releaseType = "kc" }}
{{ else if (eq ($mainRelease | getOrNil "type") "application") }}
{{ $releaseType = "app" }}
{{ else if (eq ($mainRelease | getOrNil "type") "service") }}
{{ $releaseType = "svc" }}
{{ end }}
{{ $autoShortName := "" }}
{{ $namespace := ($releaseNamespace | substr 0 3) }}
{{ $autoShortName = (printf "%s-%s-%s-%s" $clusterShortName $releaseType $namespace $initials) }}
{{ $shortName := (coalesce ($mainRelease | getOrNil "shortName") $autoShortName) }}
{{ $releaseServiceAccountName := $shortName | substr 0 30 }}
{{ $releaseBucketName := $shortName | substr 0 63 }}
{{ $releaseRoleName := ($shortName | kebabcase | replace "-" "." | untitle) }}
{{ $name = $shortName }}

{{ if (eq ($mainRelease | getOrNil "type") "release") }}
{{ $externalSecrets := ($mainRelease | getOrNil "external-secrets") }}
manifests:
{{ range $key, $value := $externalSecrets }}
- apiVersion: external-secrets.io/v1beta1
  kind: ExternalSecret
  metadata:
    name: {{ $key }}
  spec:
    refreshInterval: "1m"
    secretStoreRef:
      name: k8s-crossplane-system
      kind: ClusterSecretStore
    target:
      creationPolicy: Owner
      template:
        data: {{ (tpl $value.data (dict "name" $name)) | nindent 10 }}
    data:
      - secretKey: privateKey
        remoteRef:
          key: {{ $name }}
          property: privateKey
{{ end }}

{{ else }}

manifests:
{{ range $applicationName, $application := .Values.applicationsList }}
{{ range $serviceName, $service := $values.servicesList }}
{{ if (eq $applicationName $mainReleaseName) }}

# RabbitMQ
{{ if (eq ($application | getOrNil "rabbitmq" | getOrNil "ref") $serviceName) }}
{{ $vhost := (coalesce ($application | getOrNil "rabbitmq" | getOrNil "vhost") (split "-" $application.rabbitmq.ref)._0) }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: {{ $applicationName }}-rabbitmq
      # name: {{ $applicationName }}-{{ $application.rabbitmq.ref }}
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          data:
            {{ if ($application.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_SERVER")  }}
            {{ ($application.rabbitmq.secretMappings.RABBITMQ_SERVER) }}: "{{ $application.rabbitmq.ref }}"
            {{ else }}
            RABBITMQ_SERVER: "{{ $application.rabbitmq.ref }}"
            {{ end }}

            {{ if ($application.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_PORT") }}
            {{ ($application.rabbitmq.secretMappings.RABBITMQ_PORT) }}: "5672"
            {{ else }}
            RABBITMQ_PORT: "5672"
            {{ end }}

            {{ if ($application.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_VHOST") }}
            {{ ($application.rabbitmq.secretMappings.RABBITMQ_VHOST) }}: "{{ $vhost }}"
            {{ else }}
            RABBITMQ_VHOST: "{{ $vhost }}"
            {{ end }}

            {{ if ($application.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_USER") }}
            {{ ($application.rabbitmq.secretMappings.RABBITMQ_USER) }}: "{{ $applicationName }}"
            {{ else }}
            RABBITMQ_USER: "{{`{{ .rabbitmq_username }}`}}"
            {{ end }}

            {{ if ($application.rabbitmq | getOrNil "secretMappings" | getOrNil "RABBITMQ_PASSWORD") }}
            {{ ($application.rabbitmq.secretMappings.RABBITMQ_PASSWORD) }}: "{{`{{ .rabbitmq_password }}`}}"
            {{ else }}
            RABBITMQ_PASSWORD: "{{`{{ .rabbitmq_password }}`}}"
            {{ end }}

            RABBITMQ_URI: amqp://{{`{{ .rabbitmq_username }}`}}:{{`{{ .rabbitmq_password }}`}}@{{ $application.rabbitmq.ref }}/{{ $vhost }}
      data:
        - secretKey: rabbitmq_username
          remoteRef:
            key: {{ $application.rabbitmq.ref }}-user-{{ $mainReleaseName }}-user-credentials
            property: username
        - secretKey: rabbitmq_password
          remoteRef:
            key: {{ $application.rabbitmq.ref }}-user-{{ $mainReleaseName }}-user-credentials
            property: password
{{ end }}
# MongoDB
{{ if (eq ($application | getOrNil "mongodb" | getOrNil "ref") $serviceName) }}
{{ $databaseName := (coalesce ($application | getOrNil "mongodb" | getOrNil "database") $applicationName) }}
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      # name: {{ $applicationName }}-{{ $application.mongodb.ref }}
      name: {{ $applicationName }}-mongodb
    spec:
      refreshInterval: "1m"
      secretStoreRef:
        name: k8s-{{ $releaseNamespace }}
        kind: ClusterSecretStore
      target:
        # creationPolicy: Merge
        creationPolicy: Owner
        template:
          data:
            {{ if ($application.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_HOST") }}
            {{ ($application.mongodb.secretMappings.DATABASE_HOST) }}: "{{ $application.mongodb.ref }}-svc"
            {{ else }}
            DATABASE_HOST: "{{ $application.mongodb.ref }}-svc"
            {{ end }}

            {{ if ($application.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_PORT") }}
            {{ ($application.mongodb.secretMappings.DATABASE_PORT) }}: "27017"
            {{ else }}
            DATABASE_PORT: "27017"
            {{ end }}

            {{ if ($application.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_NAME") }}
            {{ ($application.mongodb.secretMappings.DATABASE_NAME) }}: "{{ $databaseName }}"
            {{ else }}
            DATABASE_NAME: "{{ $databaseName }}"
            {{ end }}

            {{ if ($application.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_USERNAME") }}
            {{ ($application.mongodb.secretMappings.DATABASE_USERNAME) }}: "{{ $applicationName }}"
            {{ else }}
            DATABASE_USERNAME: "{{ $applicationName }}"
            {{ end }}

            {{ if ($application.mongodb | getOrNil "secretMappings" | getOrNil "DATABASE_PASSWORD") }}
            {{ ($application.mongodb.secretMappings.DATABASE_PASSWORD) }}: "{{`{{ .mongodb_password }}`}}"
            {{ else }}
            DATABASE_PASSWORD: "{{`{{ .mongodb_password }}`}}"
            {{ end }}

            MONGODB_URI: mongodb://{{ $applicationName }}:{{`{{ .mongodb_password }}`}}@{{ $application.mongodb.ref }}-svc/{{ $databaseName }}?replicaSet={{ $application.mongodb.ref }}
      data:
        - secretKey: mongodb_password
          remoteRef:
            key: {{ $application.mongodb.ref }}-{{ $application.mongodb.ref }}-{{ $applicationName }}-{{ $application.mongodb.ref }}-{{ $applicationName }}-password
            property: password
{{ end }}



{{ end }}
{{ end }}
{{ end }}
{{ end }}
