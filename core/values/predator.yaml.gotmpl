{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}
cluster: {{ toYaml $values.cluster | nindent 2 }}

replicaCount: 1

port: 80

podAnnotations: {}
imagePullSecrets: {}

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations:
  {{ if $values.cluster.common.defaultIngressAnnotations }}
    {{ toYaml $values.cluster.common.defaultIngressAnnotations | nindent 4 }}
  {{- end }}
  {{- if (index $release "config" "ingress" "annotations") }}
    {{ toYaml (index $release "config" "ingress" "annotations") | nindent 4 }}
  {{- end }}
  labels:
  {{ if $values.cluster.common.defaultIngressLabels }}
    {{ toYaml $values.cluster.common.defaultIngressLabels | nindent 4 }}
  {{- end }}
  {{- if (index $release "config" "ingress" "labels") }}
    {{ toYaml (index $release "config" "ingress" "labels") | nindent 4 }}
  {{- end }}
  tls:
    - secretName: {{ (index $release "config" "ingress" "subdomain") | replace "." "-"}}-tls
      hosts:
        - {{ (index $release "config" "ingress" "subdomain") }}.{{ $values.cluster.config.domain }}
  hosts:
    - {{ (index $release "config" "ingress" "subdomain") }}.{{ $values.cluster.config.domain }}

persistence:
  enabled: true
  # storageClassName: default
  accessModes:
  - ReadWriteOnce
  size: 2Gi
  # annotations: {}
  # existingClaim:

tolerations: {{ toYaml (index $release "scheduling" "tolerations") | nindent 2 }}
nodeSelector: {{ toYaml (index $release "scheduling" "nodeSelector") | nindent 2 }}
affinity: {{ toYaml (index $release "scheduling" "affinity") | nindent 2 }}

database:
  type: SQLITE
  name:
  address:
  username:
  password:
  cassandra:
    replicationFactor: 1
    keySpaceStrategy: SimpleStrategy
    localDataCenter:
  sqlite:
    storage: /db/predator

internalAddress:
kubernetesUrl: https://kubernetes.default.svc
jobPlatform: KUBERNETES
apiVersion: v1
delayRunnerMs: {{ index $release "config" "delayRunnerMs" }}
runnerDockerImage: {{ index $release "config" "runnerDockerImage" }}
runnerCpu: {{ index $release "config" "runnerCpu" }}
runnerMemory: {{ index $release "config" "runnerMemory" }}
intervalCleanupFinishedContainers: {{ index $release "config" "intervalCleanupFinishedContainers" }}
customRunnerDefinition: {{ toYaml (index $release "config" "customRunnerDefinition") | nindent 2 }}
allowInsecureTls: {{ index $release "config" "allowInsecureTls" }}
skipInternalAddressCheck: {{ index $release "config" "skipInternalAddressCheck" }}
serviceAccount:
  create: true
rbac:
  create: true


streaming:
  platform:
  platformHealthCheckTimeoutMs: 2000
  excludedAttributes:
  kafka:
    brokers:
    clientId: predator
    topic:
    autoTopicCreation: false
    adminRetries: 2

customRunnerDefinition: |-
  {
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "sidecar.istio.io/inject": "false"
          }
        }
      }
    }
  }

# {
#   "spec": {
#     "template": {
#       "spec": {
#         "nodeSelector": {
#           "type": "predator"
#         },
#         "tolerations": [{
#           "key": "type",
#           "operator": "Equal",
#           "value": "predator",
#           "effect": "NoSchedule"
#         },{
#           "key": "type",
#           "operator": "Equal",
#           "value": "predator",
#           "effect": "NoExecute"
#         }]
#       }
#     }
#   }
# }
