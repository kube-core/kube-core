{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}
cluster: {{ toYaml $values.cluster | nindent 2 }}

{{ $bucketName := "velero-backups" }}
{{ if $release.metadata.config.cloudEnabled }}
{{ $bucketName = $release.metadata.namingConfig.templated.releaseBucketName }}
{{ else }}
{{ $bucketName = ($values | get "cluster.config.backups.bucket" (printf "%s-velero-backups" $values.cluster.config.name)) }}
{{ end }}

initContainers:
  {{ if eq $values.cloud.provider "aws" }}
  - name: velero-plugin-for-aws
    image: velero/velero-plugin-for-aws:v1.7.0
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins
  {{ else if eq $values.cloud.provider "gcp" }}
  - name: velero-plugin-for-gcp
    image: velero/velero-plugin-for-gcp:v1.7.0
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins
  {{ end }}

configuration:
  backupStorageLocation:
  - name:
    provider: {{ $values.cloud.provider }}
    bucket: {{ $bucketName }}
    {{ if eq $values.cloud.provider "gcp" }}
    serviceAccount: velero
    {{ end }}

  extraEnvVars:
    {{ if eq $values.cloud.provider "aws" }}
    AWS_CLUSTER_NAME: {{ $values.cluster.config.domain }}
    {{ else if eq $values.cloud.provider "gcp" }}
    # Now patched in releases via strategicmergepatch, which is still not ideal but better than this.
    # GOOGLE_APPLICATION_CREDENTIALS: /credentials/velero.json
    {{ end }}
  logFormat: json
rbac:
  create: true
  clusterAdministrator: true

serviceAccount:
  server:
    create: true
    name:
    annotations:
      {{ if eq $values.cloud.provider "aws" }}
      eks.amazonaws.com/role-arn: {{ index $values.cluster.config.backups "config" "role-arn" }}
      {{ end }}
    labels:

{{ if eq $values.cloud.provider "gcp" }}
credentials:
  useSecret: true
  existingSecret: {{ (index $release "secrets" "credentials" "secretRef" "name" ) }}
{{ end }}

backupsEnabled: true
snapshotsEnabled: false
deployNodeAgent: false
schedules:
  full:
    labels:
      cluster: {{ $values.cluster.config.name }}
      type: full
    schedule: {{ $values.cluster.config.backups.schedule }}
    template:
      includedNamespaces:
        - "*"
