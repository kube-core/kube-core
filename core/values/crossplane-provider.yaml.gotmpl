{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


{{ $aws := (eq $values.cloud.provider "aws" ) }}
{{ $gcp := (eq $values.cloud.provider "gcp" ) }}
{{ $provider :=  $values.cloud.provider }}

manifests:
  ################################################################################
  # Setting up the default provider configuration.
  ################################################################################

  {{ if (or $gcp $aws) }}
  - apiVersion: pkg.crossplane.io/v1alpha1
    kind: ControllerConfig
    metadata:
      name: {{ $provider }}
    spec:
      args:
        # Enable ExernalSecretStores alpha feature (publishConnectionDetailsTo).
        - --enable-external-secret-stores
        # - --debug

  - apiVersion: pkg.crossplane.io/v1
    kind: Provider
    metadata:
      name: {{ $provider }}
    spec:
      {{ if (eq $provider "gcp") }}
      package: "crossplane/provider-gcp:v0.21.0"
      {{ else if (eq $provider "aws") }}
      package: "crossplane/provider-aws:v0.30.1"
      {{ end }}
      controllerConfigRef:
        name: {{ $provider }}
  {{ if $gcp }}
  - apiVersion: pkg.crossplane.io/v1
    kind: Provider
    metadata:
      name: upbound-{{ $provider }}
    spec:
      package: xpkg.upbound.io/upbound/provider-gcp:v0.18.0

  - apiVersion: pkg.crossplane.io/v1alpha1
    kind: ControllerConfig
    metadata:
      name: sql

  - apiVersion: pkg.crossplane.io/v1alpha1
    kind: ControllerConfig
    metadata:
      name: jet-gcp
    spec:
      args:
        - --enable-external-secret-stores

  - apiVersion: pkg.crossplane.io/v1
    kind: Provider
    metadata:
      name: sql
    spec:
      package: "crossplane/provider-sql:v0.5.0"
      controllerConfigRef:
        name: sql

  - apiVersion: pkg.crossplane.io/v1
    kind: Provider
    metadata:
      name: jet-gcp
    spec:
      package: "crossplane/provider-jet-gcp:v0.3.0-preview"
      controllerConfigRef:
        name: jet-gcp
  {{ end }}
  {{ if $aws }}
  - apiVersion: pkg.crossplane.io/v1
    kind: Provider
    metadata:
      name: upbound-{{ $provider }}
    spec:
      package: xpkg.upbound.io/upbound/provider-aws:v0.29.0
  {{ end }}
  {{ else }}
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: crossplane-provider
    data:
      crossplane-provider.yaml: |
        warning: crossplane-provider only works with $values.cloud.provider equal to aws or gcp.
  {{ end }}
