{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


cluster:
  common: {{ toYaml .Values.cluster.common | nindent 4 }}
  config: {{ toYaml .Values.cluster.config | nindent 4 }}
  logging:
    config:
      indexTemplate:
        secretRef:
          name: logstash-default-index-template
          key: template
    {{ if $release.metadata.config.cloudEnabled }}
      bucketPrefixOverride: {{ $release.metadata.namingConfig.templated.releaseBucketName }}
    {{ end }}
    {{ if (and .Values.cluster.logging.enabled .Values.cluster.logging.defaultConfig.enabled) }}
    flows:
      default:
        enabled: true
      flows:
      - name: app
      - name: cluster
    {{ end }}
    integrations:
      es:
        enabled: true
        config:
          ilm_policy_overwrite: true
          ilm_policy_id: ""
          ilm_policy:
            policy:
              phases:
                hot:
                  min_age: 0ms
                  actions:
                    rollover:
                      max_size: 50gb
                      max_age: 30d
                delete:
                  min_age: 30d
                  actions:
                    delete:
                      delete_searchable_snapshot: true
      tekton:
        enabled: {{ $coreReleases.tekton.enabled }}
        txtLogs: false
      gcs:
        enabled: {{ (and (index $release "cloud" "enabled") (eq .Values.cloud.provider "gcp")) }}
    {{ if $release.metadata.config.cloudEnabled }}
        bucketPrefixOverride: {{ $release.metadata.namingConfig.templated.releaseBucketName }}
        config:
          credentials:
            secretKeyRef:
              secretName: {{ $release.metadata.namingConfig.templated.releaseServiceAccountKeyName }}
              secretKey: privateKey
    {{ end }}
      events:
        enabled: true
    stack:
      es:
        nodes:
          storageClass: gcp-sc-retain-wait-ssd
          affinity: {}
          nodeSelector: {}
          tolerations:
          - key: "type"
            operator: "Equal"
            value: "search"
            effect: "NoSchedule"
          - key: "type"
            operator: "Equal"
            value: "search"
            effect: "NoExecute"
          - key: "type"
            operator: "Equal"
            value: "logging"
            effect: "NoSchedule"
          - key: "type"
            operator: "Equal"
            value: "logging"
            effect: "NoExecute"
          - key: "type"
            operator: "Equal"
            value: "monitoring"
            effect: "NoSchedule"
          - key: "type"
            operator: "Equal"
            value: "monitoring"
            effect: "NoExecute"
      kibana:
        enabled: true
      minio:
        enabled: false
      fluentd:
        buffer:
          storageClass: gcp-sc-retain-wait-ssd
        tolerations:
        - key: "type"
          operator: "Equal"
          value: "monitoring"
          effect: "NoSchedule"
        - key: "type"
          operator: "Equal"
          value: "monitoring"
          effect: "NoExecute"
        affinity: {}
      fluentbit:
        enabled: true
        tolerations:
        - key: "type"
          operator: "Equal"
          value: "monitoring"
          effect: "NoSchedule"
        - key: "type"
          operator: "Equal"
          value: "monitoring"
          effect: "NoExecute"
        - key: "type"
          operator: "Equal"
          value: "production"
          effect: "NoSchedule"
        - key: "type"
          operator: "Equal"
          value: "production"
          effect: "NoExecute"
        # - key: "type"
        #   operator: "Equal"
        #   value: "system"
        #   effect: "NoSchedule"
        # - key: "type"
        #   operator: "Equal"
        #   value: "system"
        #   effect: "NoExecute"
        affinity: {}

cloud: {{ toYaml .Values.cloud | nindent 2 }}
secrets: {{ toYaml (index $release "secrets") | nindent 2 }}
