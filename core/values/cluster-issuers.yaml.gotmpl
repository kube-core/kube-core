{{/* Release Header - Start */}}

{{/* Common Variables */}}
{{ $values := (coalesce (. | getOrNil "values") (. | getOrNil "Values")) }}
{{ $release := (. | getOrNil "item") }}
{{ $releaseNamespace := (coalesce ($release | getOrNil "namespace") (. | getOrNil "Release" | getOrNil "Namespace")) }}
{{ $releaseName := (coalesce ($release | getOrNil "name") (. | getOrNil "Release" | getOrNil "Name")) }}

{{/* Releases Variables */}}
{{ $coreReleases := ($values | getOrNil "releases") }}
{{ $clusterReleases := ($values | getOrNil "clusterReleases") }}
{{ $environments := ($values | getOrNil "environments") }}
{{ $environment := ($environments | getOrNil $releaseNamespace) }}
{{ $applications := (coalesce ($environment | getOrNil "applications") ($values | getOrNil "applications")) }}
{{ $services := (coalesce ($environment | getOrNil "services") ($values | getOrNil "services")) }}

{{/* Applications Variables */}}
{{ $application := ($applications | getOrNil $releaseName) }}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Services Variables */}}
{{ $service := ($services | getOrNil $releaseName) }}

{{/* Core Releases */}}
{{ $coreRelease := ($coreReleases | getOrNil $releaseName) }}

{{/* Cluster Releases */}}
{{ $clusterRelease := ($clusterReleases | getOrNil $releaseName) }}

{{/* Release Variables */}}
{{ $release := (coalesce (. | getOrNil "item") $application $service $clusterRelease $coreRelease) }}
{{ $releaseType := (coalesce ($release | getOrNil "type") "unknown") }}

{{ if and $release $coreRelease }}
{{ $release = ((eq $coreRelease.name $release.name) | ternary (mergeOverwrite (deepCopy $coreRelease) $release) ($release)) }}
{{ end }}

{{ if ($release | getOrNil "injectCoreValuesFromRelease") }}
{{ $release = (mergeOverwrite ((deepCopy $coreReleases) | getOrNil ($release | getOrNil "injectCoreValuesFromRelease")) $release) }}
{{ end }}

{{/* Extensions Variables */}}
{{ $extensionType := (coalesce (. | getOrNil "extensionType") "unknown") }}
{{ $extension := (coalesce ($release | getOrNil $extensionType) ($release | getOrNil ($extensionType | camelcase | untitle)) ) }}

{{/* Template Variables */}}
{{ $templateValues := (dict "coreValues" $values "releaseValues" $extension "parentReleaseValues" $release "releaseNamespace" $releaseNamespace "releaseName" $releaseName) }}

{{/* Release Header - End */}}


manifests:
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-staging
    namespace: cert-manager
  spec:
    acme:
      email: {{ .Values.cluster.config.adminEmail }}
      privateKeySecretRef:
        name: letsencrypt-staging
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      solvers:
      - http01:
          ingress:
            class: {{ .Values.cluster.common.defaultIngressClass }}
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-prod
    namespace: cert-manager
  spec:
    acme:
      email:  {{ .Values.cluster.config.adminEmail }}
      privateKeySecretRef:
        name: letsencrypt-prod
      server: https://acme-v02.api.letsencrypt.org/directory
      solvers:
      - http01:
          ingress:
            class: {{ .Values.cluster.common.defaultIngressClass }}
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-dns-staging-gcp
    namespace: cert-manager
  spec:
    acme:
      email:  {{ .Values.cluster.config.adminEmail }}
      privateKeySecretRef:
        name: letsencrypt-dns-staging-gcp
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      solvers:
      {{ if eq .Values.cloud.provider "gcp"}}
      - dns01:
          cloudDNS:
            project: {{ .Values.cloud.project }}
            serviceAccountSecretRef:
              key: {{ (index $release "secrets" "credentials" "secretRef" "key") }}
              name: {{ (index $release "secrets" "credentials" "secretRef" "name") }}
      {{ else if eq .Values.cloud.provider "aws"}}
      - dns01:
          route53:
            region: {{ .Values.cloud.default.location }} # TODO: Make this variable !
      {{ end }}
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-dns-production-gcp
    namespace: cert-manager
  spec:
    acme:
      email:  {{ .Values.cluster.config.adminEmail }}
      privateKeySecretRef:
        name: letsencrypt-dns-production-gcp
      server: https://acme-v02.api.letsencrypt.org/directory
      solvers:
      {{ if eq .Values.cloud.provider "gcp"}}
      - dns01:
          cloudDNS:
            project: {{ .Values.cloud.project }}
            serviceAccountSecretRef:
              key: {{ (index $release "secrets" "credentials" "secretRef" "key") }}
              name: {{ (index $release "secrets" "credentials" "secretRef" "name") }}
      {{ else if eq .Values.cloud.provider "aws"}}
      - dns01:
          route53:
            region: {{ .Values.cloud.default.location }} # TODO: Make this variable !
      {{ end }}
